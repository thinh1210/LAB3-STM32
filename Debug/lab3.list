
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003400  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003510  08003510  00004510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003534  08003534  00005044  2**0
                  CONTENTS
  4 .ARM          00000000  08003534  08003534  00005044  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003534  08003534  00005044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003534  08003534  00004534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003538  08003538  00004538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000044  20000000  0800353c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000044  08003580  00005044  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08003580  000051a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a17  00000000  00000000  0000506d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e0c  00000000  00000000  0000da84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0000f890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000080e  00000000  00000000  00010330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018058  00000000  00000000  00010b3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db66  00000000  00000000  00028b96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085f30  00000000  00000000  000366fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bc62c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b64  00000000  00000000  000bc670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003f  00000000  00000000  000bf1d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000044 	.word	0x20000044
 800012c:	00000000 	.word	0x00000000
 8000130:	080034f8 	.word	0x080034f8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000048 	.word	0x20000048
 800014c:	080034f8 	.word	0x080034f8

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	@ 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__gedf2>:
 800071c:	f04f 3cff 	mov.w	ip, #4294967295
 8000720:	e006      	b.n	8000730 <__cmpdf2+0x4>
 8000722:	bf00      	nop

08000724 <__ledf2>:
 8000724:	f04f 0c01 	mov.w	ip, #1
 8000728:	e002      	b.n	8000730 <__cmpdf2+0x4>
 800072a:	bf00      	nop

0800072c <__cmpdf2>:
 800072c:	f04f 0c01 	mov.w	ip, #1
 8000730:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000734:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000738:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800073c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000746:	d01b      	beq.n	8000780 <__cmpdf2+0x54>
 8000748:	b001      	add	sp, #4
 800074a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800074e:	bf0c      	ite	eq
 8000750:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000754:	ea91 0f03 	teqne	r1, r3
 8000758:	bf02      	ittt	eq
 800075a:	ea90 0f02 	teqeq	r0, r2
 800075e:	2000      	moveq	r0, #0
 8000760:	4770      	bxeq	lr
 8000762:	f110 0f00 	cmn.w	r0, #0
 8000766:	ea91 0f03 	teq	r1, r3
 800076a:	bf58      	it	pl
 800076c:	4299      	cmppl	r1, r3
 800076e:	bf08      	it	eq
 8000770:	4290      	cmpeq	r0, r2
 8000772:	bf2c      	ite	cs
 8000774:	17d8      	asrcs	r0, r3, #31
 8000776:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800077a:	f040 0001 	orr.w	r0, r0, #1
 800077e:	4770      	bx	lr
 8000780:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000784:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000788:	d102      	bne.n	8000790 <__cmpdf2+0x64>
 800078a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800078e:	d107      	bne.n	80007a0 <__cmpdf2+0x74>
 8000790:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000794:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000798:	d1d6      	bne.n	8000748 <__cmpdf2+0x1c>
 800079a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800079e:	d0d3      	beq.n	8000748 <__cmpdf2+0x1c>
 80007a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop

080007a8 <__aeabi_cdrcmple>:
 80007a8:	4684      	mov	ip, r0
 80007aa:	4610      	mov	r0, r2
 80007ac:	4662      	mov	r2, ip
 80007ae:	468c      	mov	ip, r1
 80007b0:	4619      	mov	r1, r3
 80007b2:	4663      	mov	r3, ip
 80007b4:	e000      	b.n	80007b8 <__aeabi_cdcmpeq>
 80007b6:	bf00      	nop

080007b8 <__aeabi_cdcmpeq>:
 80007b8:	b501      	push	{r0, lr}
 80007ba:	f7ff ffb7 	bl	800072c <__cmpdf2>
 80007be:	2800      	cmp	r0, #0
 80007c0:	bf48      	it	mi
 80007c2:	f110 0f00 	cmnmi.w	r0, #0
 80007c6:	bd01      	pop	{r0, pc}

080007c8 <__aeabi_dcmpeq>:
 80007c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007cc:	f7ff fff4 	bl	80007b8 <__aeabi_cdcmpeq>
 80007d0:	bf0c      	ite	eq
 80007d2:	2001      	moveq	r0, #1
 80007d4:	2000      	movne	r0, #0
 80007d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007da:	bf00      	nop

080007dc <__aeabi_dcmplt>:
 80007dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007e0:	f7ff ffea 	bl	80007b8 <__aeabi_cdcmpeq>
 80007e4:	bf34      	ite	cc
 80007e6:	2001      	movcc	r0, #1
 80007e8:	2000      	movcs	r0, #0
 80007ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ee:	bf00      	nop

080007f0 <__aeabi_dcmple>:
 80007f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007f4:	f7ff ffe0 	bl	80007b8 <__aeabi_cdcmpeq>
 80007f8:	bf94      	ite	ls
 80007fa:	2001      	movls	r0, #1
 80007fc:	2000      	movhi	r0, #0
 80007fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000802:	bf00      	nop

08000804 <__aeabi_dcmpge>:
 8000804:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000808:	f7ff ffce 	bl	80007a8 <__aeabi_cdrcmple>
 800080c:	bf94      	ite	ls
 800080e:	2001      	movls	r0, #1
 8000810:	2000      	movhi	r0, #0
 8000812:	f85d fb08 	ldr.w	pc, [sp], #8
 8000816:	bf00      	nop

08000818 <__aeabi_dcmpgt>:
 8000818:	f84d ed08 	str.w	lr, [sp, #-8]!
 800081c:	f7ff ffc4 	bl	80007a8 <__aeabi_cdrcmple>
 8000820:	bf34      	ite	cc
 8000822:	2001      	movcc	r0, #1
 8000824:	2000      	movcs	r0, #0
 8000826:	f85d fb08 	ldr.w	pc, [sp], #8
 800082a:	bf00      	nop

0800082c <__aeabi_d2iz>:
 800082c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000830:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000834:	d215      	bcs.n	8000862 <__aeabi_d2iz+0x36>
 8000836:	d511      	bpl.n	800085c <__aeabi_d2iz+0x30>
 8000838:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800083c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000840:	d912      	bls.n	8000868 <__aeabi_d2iz+0x3c>
 8000842:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000846:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800084a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800084e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000852:	fa23 f002 	lsr.w	r0, r3, r2
 8000856:	bf18      	it	ne
 8000858:	4240      	negne	r0, r0
 800085a:	4770      	bx	lr
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	4770      	bx	lr
 8000862:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000866:	d105      	bne.n	8000874 <__aeabi_d2iz+0x48>
 8000868:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800086c:	bf08      	it	eq
 800086e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop

0800087c <Enable_led>:
		EN0_Pin,
		EN1_Pin,
		EN2_Pin,
		EN3_Pin
};
void Enable_led(int Pos){
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	for(int i=0 ; i< NO_EN; i++){
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	e00c      	b.n	80008a4 <Enable_led+0x28>
		HAL_GPIO_WritePin(GPIOB, array_EN_pin[i], SET);
 800088a:	4a0f      	ldr	r2, [pc, #60]	@ (80008c8 <Enable_led+0x4c>)
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000892:	b29b      	uxth	r3, r3
 8000894:	2202      	movs	r2, #2
 8000896:	4619      	mov	r1, r3
 8000898:	480c      	ldr	r0, [pc, #48]	@ (80008cc <Enable_led+0x50>)
 800089a:	f001 fd9a 	bl	80023d2 <HAL_GPIO_WritePin>
	for(int i=0 ; i< NO_EN; i++){
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	3301      	adds	r3, #1
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	2b03      	cmp	r3, #3
 80008a8:	ddef      	ble.n	800088a <Enable_led+0xe>
	}
	HAL_GPIO_WritePin(GPIOB, array_EN_pin[Pos], RESET);
 80008aa:	4a07      	ldr	r2, [pc, #28]	@ (80008c8 <Enable_led+0x4c>)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	2200      	movs	r2, #0
 80008b6:	4619      	mov	r1, r3
 80008b8:	4804      	ldr	r0, [pc, #16]	@ (80008cc <Enable_led+0x50>)
 80008ba:	f001 fd8a 	bl	80023d2 <HAL_GPIO_WritePin>
}
 80008be:	bf00      	nop
 80008c0:	3710      	adds	r7, #16
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000010 	.word	0x20000010
 80008cc:	40010c00 	.word	0x40010c00

080008d0 <display7SEG>:
int buffer_led[]={0,0,0,0};


void display7SEG ( int number){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	switch (number) {
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2b09      	cmp	r3, #9
 80008dc:	f200 829c 	bhi.w	8000e18 <display7SEG+0x548>
 80008e0:	a201      	add	r2, pc, #4	@ (adr r2, 80008e8 <display7SEG+0x18>)
 80008e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e6:	bf00      	nop
 80008e8:	08000911 	.word	0x08000911
 80008ec:	08000991 	.word	0x08000991
 80008f0:	08000a11 	.word	0x08000a11
 80008f4:	08000a91 	.word	0x08000a91
 80008f8:	08000b11 	.word	0x08000b11
 80008fc:	08000b99 	.word	0x08000b99
 8000900:	08000c19 	.word	0x08000c19
 8000904:	08000c99 	.word	0x08000c99
 8000908:	08000d19 	.word	0x08000d19
 800090c:	08000d99 	.word	0x08000d99
		case 0:
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[0], RESET);
 8000910:	4b9f      	ldr	r3, [pc, #636]	@ (8000b90 <display7SEG+0x2c0>)
 8000912:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000916:	b29b      	uxth	r3, r3
 8000918:	2200      	movs	r2, #0
 800091a:	4619      	mov	r1, r3
 800091c:	489d      	ldr	r0, [pc, #628]	@ (8000b94 <display7SEG+0x2c4>)
 800091e:	f001 fd58 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[1], RESET);
 8000922:	4b9b      	ldr	r3, [pc, #620]	@ (8000b90 <display7SEG+0x2c0>)
 8000924:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000928:	b29b      	uxth	r3, r3
 800092a:	2200      	movs	r2, #0
 800092c:	4619      	mov	r1, r3
 800092e:	4899      	ldr	r0, [pc, #612]	@ (8000b94 <display7SEG+0x2c4>)
 8000930:	f001 fd4f 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[2], RESET);
 8000934:	4b96      	ldr	r3, [pc, #600]	@ (8000b90 <display7SEG+0x2c0>)
 8000936:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800093a:	b29b      	uxth	r3, r3
 800093c:	2200      	movs	r2, #0
 800093e:	4619      	mov	r1, r3
 8000940:	4894      	ldr	r0, [pc, #592]	@ (8000b94 <display7SEG+0x2c4>)
 8000942:	f001 fd46 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[3], RESET);
 8000946:	4b92      	ldr	r3, [pc, #584]	@ (8000b90 <display7SEG+0x2c0>)
 8000948:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800094c:	b29b      	uxth	r3, r3
 800094e:	2200      	movs	r2, #0
 8000950:	4619      	mov	r1, r3
 8000952:	4890      	ldr	r0, [pc, #576]	@ (8000b94 <display7SEG+0x2c4>)
 8000954:	f001 fd3d 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[4], RESET);
 8000958:	4b8d      	ldr	r3, [pc, #564]	@ (8000b90 <display7SEG+0x2c0>)
 800095a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800095e:	b29b      	uxth	r3, r3
 8000960:	2200      	movs	r2, #0
 8000962:	4619      	mov	r1, r3
 8000964:	488b      	ldr	r0, [pc, #556]	@ (8000b94 <display7SEG+0x2c4>)
 8000966:	f001 fd34 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[5], RESET);
 800096a:	4b89      	ldr	r3, [pc, #548]	@ (8000b90 <display7SEG+0x2c0>)
 800096c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000970:	b29b      	uxth	r3, r3
 8000972:	2200      	movs	r2, #0
 8000974:	4619      	mov	r1, r3
 8000976:	4887      	ldr	r0, [pc, #540]	@ (8000b94 <display7SEG+0x2c4>)
 8000978:	f001 fd2b 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[6], SET);
 800097c:	4b84      	ldr	r3, [pc, #528]	@ (8000b90 <display7SEG+0x2c0>)
 800097e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000982:	b29b      	uxth	r3, r3
 8000984:	2202      	movs	r2, #2
 8000986:	4619      	mov	r1, r3
 8000988:	4882      	ldr	r0, [pc, #520]	@ (8000b94 <display7SEG+0x2c4>)
 800098a:	f001 fd22 	bl	80023d2 <HAL_GPIO_WritePin>
			break;
 800098e:	e244      	b.n	8000e1a <display7SEG+0x54a>
		case 1:
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[0], SET);
 8000990:	4b7f      	ldr	r3, [pc, #508]	@ (8000b90 <display7SEG+0x2c0>)
 8000992:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000996:	b29b      	uxth	r3, r3
 8000998:	2202      	movs	r2, #2
 800099a:	4619      	mov	r1, r3
 800099c:	487d      	ldr	r0, [pc, #500]	@ (8000b94 <display7SEG+0x2c4>)
 800099e:	f001 fd18 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[1], RESET);
 80009a2:	4b7b      	ldr	r3, [pc, #492]	@ (8000b90 <display7SEG+0x2c0>)
 80009a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	2200      	movs	r2, #0
 80009ac:	4619      	mov	r1, r3
 80009ae:	4879      	ldr	r0, [pc, #484]	@ (8000b94 <display7SEG+0x2c4>)
 80009b0:	f001 fd0f 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[2], RESET);
 80009b4:	4b76      	ldr	r3, [pc, #472]	@ (8000b90 <display7SEG+0x2c0>)
 80009b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	2200      	movs	r2, #0
 80009be:	4619      	mov	r1, r3
 80009c0:	4874      	ldr	r0, [pc, #464]	@ (8000b94 <display7SEG+0x2c4>)
 80009c2:	f001 fd06 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[3], SET);
 80009c6:	4b72      	ldr	r3, [pc, #456]	@ (8000b90 <display7SEG+0x2c0>)
 80009c8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	2202      	movs	r2, #2
 80009d0:	4619      	mov	r1, r3
 80009d2:	4870      	ldr	r0, [pc, #448]	@ (8000b94 <display7SEG+0x2c4>)
 80009d4:	f001 fcfd 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[4], SET);
 80009d8:	4b6d      	ldr	r3, [pc, #436]	@ (8000b90 <display7SEG+0x2c0>)
 80009da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80009de:	b29b      	uxth	r3, r3
 80009e0:	2202      	movs	r2, #2
 80009e2:	4619      	mov	r1, r3
 80009e4:	486b      	ldr	r0, [pc, #428]	@ (8000b94 <display7SEG+0x2c4>)
 80009e6:	f001 fcf4 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[5], SET);
 80009ea:	4b69      	ldr	r3, [pc, #420]	@ (8000b90 <display7SEG+0x2c0>)
 80009ec:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	2202      	movs	r2, #2
 80009f4:	4619      	mov	r1, r3
 80009f6:	4867      	ldr	r0, [pc, #412]	@ (8000b94 <display7SEG+0x2c4>)
 80009f8:	f001 fceb 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[6], SET);
 80009fc:	4b64      	ldr	r3, [pc, #400]	@ (8000b90 <display7SEG+0x2c0>)
 80009fe:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	2202      	movs	r2, #2
 8000a06:	4619      	mov	r1, r3
 8000a08:	4862      	ldr	r0, [pc, #392]	@ (8000b94 <display7SEG+0x2c4>)
 8000a0a:	f001 fce2 	bl	80023d2 <HAL_GPIO_WritePin>
			break;
 8000a0e:	e204      	b.n	8000e1a <display7SEG+0x54a>
		case 2:
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[0], RESET);
 8000a10:	4b5f      	ldr	r3, [pc, #380]	@ (8000b90 <display7SEG+0x2c0>)
 8000a12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	2200      	movs	r2, #0
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	485d      	ldr	r0, [pc, #372]	@ (8000b94 <display7SEG+0x2c4>)
 8000a1e:	f001 fcd8 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[1], RESET);
 8000a22:	4b5b      	ldr	r3, [pc, #364]	@ (8000b90 <display7SEG+0x2c0>)
 8000a24:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4859      	ldr	r0, [pc, #356]	@ (8000b94 <display7SEG+0x2c4>)
 8000a30:	f001 fccf 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[2], SET);
 8000a34:	4b56      	ldr	r3, [pc, #344]	@ (8000b90 <display7SEG+0x2c0>)
 8000a36:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	2202      	movs	r2, #2
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4854      	ldr	r0, [pc, #336]	@ (8000b94 <display7SEG+0x2c4>)
 8000a42:	f001 fcc6 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[3], RESET);
 8000a46:	4b52      	ldr	r3, [pc, #328]	@ (8000b90 <display7SEG+0x2c0>)
 8000a48:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000a4c:	b29b      	uxth	r3, r3
 8000a4e:	2200      	movs	r2, #0
 8000a50:	4619      	mov	r1, r3
 8000a52:	4850      	ldr	r0, [pc, #320]	@ (8000b94 <display7SEG+0x2c4>)
 8000a54:	f001 fcbd 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[4], RESET);
 8000a58:	4b4d      	ldr	r3, [pc, #308]	@ (8000b90 <display7SEG+0x2c0>)
 8000a5a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	2200      	movs	r2, #0
 8000a62:	4619      	mov	r1, r3
 8000a64:	484b      	ldr	r0, [pc, #300]	@ (8000b94 <display7SEG+0x2c4>)
 8000a66:	f001 fcb4 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[5], SET);
 8000a6a:	4b49      	ldr	r3, [pc, #292]	@ (8000b90 <display7SEG+0x2c0>)
 8000a6c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	2202      	movs	r2, #2
 8000a74:	4619      	mov	r1, r3
 8000a76:	4847      	ldr	r0, [pc, #284]	@ (8000b94 <display7SEG+0x2c4>)
 8000a78:	f001 fcab 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[6], RESET);
 8000a7c:	4b44      	ldr	r3, [pc, #272]	@ (8000b90 <display7SEG+0x2c0>)
 8000a7e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	2200      	movs	r2, #0
 8000a86:	4619      	mov	r1, r3
 8000a88:	4842      	ldr	r0, [pc, #264]	@ (8000b94 <display7SEG+0x2c4>)
 8000a8a:	f001 fca2 	bl	80023d2 <HAL_GPIO_WritePin>
			break;
 8000a8e:	e1c4      	b.n	8000e1a <display7SEG+0x54a>
		case 3:
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[0], RESET);
 8000a90:	4b3f      	ldr	r3, [pc, #252]	@ (8000b90 <display7SEG+0x2c0>)
 8000a92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	2200      	movs	r2, #0
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	483d      	ldr	r0, [pc, #244]	@ (8000b94 <display7SEG+0x2c4>)
 8000a9e:	f001 fc98 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[1], RESET);
 8000aa2:	4b3b      	ldr	r3, [pc, #236]	@ (8000b90 <display7SEG+0x2c0>)
 8000aa4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	2200      	movs	r2, #0
 8000aac:	4619      	mov	r1, r3
 8000aae:	4839      	ldr	r0, [pc, #228]	@ (8000b94 <display7SEG+0x2c4>)
 8000ab0:	f001 fc8f 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[2], RESET);
 8000ab4:	4b36      	ldr	r3, [pc, #216]	@ (8000b90 <display7SEG+0x2c0>)
 8000ab6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	2200      	movs	r2, #0
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4834      	ldr	r0, [pc, #208]	@ (8000b94 <display7SEG+0x2c4>)
 8000ac2:	f001 fc86 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[3], RESET);
 8000ac6:	4b32      	ldr	r3, [pc, #200]	@ (8000b90 <display7SEG+0x2c0>)
 8000ac8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	2200      	movs	r2, #0
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4830      	ldr	r0, [pc, #192]	@ (8000b94 <display7SEG+0x2c4>)
 8000ad4:	f001 fc7d 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[4], SET);
 8000ad8:	4b2d      	ldr	r3, [pc, #180]	@ (8000b90 <display7SEG+0x2c0>)
 8000ada:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	2202      	movs	r2, #2
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	482b      	ldr	r0, [pc, #172]	@ (8000b94 <display7SEG+0x2c4>)
 8000ae6:	f001 fc74 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[5], SET);
 8000aea:	4b29      	ldr	r3, [pc, #164]	@ (8000b90 <display7SEG+0x2c0>)
 8000aec:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	2202      	movs	r2, #2
 8000af4:	4619      	mov	r1, r3
 8000af6:	4827      	ldr	r0, [pc, #156]	@ (8000b94 <display7SEG+0x2c4>)
 8000af8:	f001 fc6b 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[6], RESET);
 8000afc:	4b24      	ldr	r3, [pc, #144]	@ (8000b90 <display7SEG+0x2c0>)
 8000afe:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	2200      	movs	r2, #0
 8000b06:	4619      	mov	r1, r3
 8000b08:	4822      	ldr	r0, [pc, #136]	@ (8000b94 <display7SEG+0x2c4>)
 8000b0a:	f001 fc62 	bl	80023d2 <HAL_GPIO_WritePin>
			break;
 8000b0e:	e184      	b.n	8000e1a <display7SEG+0x54a>
		case 4:
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[0], SET);
 8000b10:	4b1f      	ldr	r3, [pc, #124]	@ (8000b90 <display7SEG+0x2c0>)
 8000b12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	2202      	movs	r2, #2
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	481d      	ldr	r0, [pc, #116]	@ (8000b94 <display7SEG+0x2c4>)
 8000b1e:	f001 fc58 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[1], RESET);
 8000b22:	4b1b      	ldr	r3, [pc, #108]	@ (8000b90 <display7SEG+0x2c0>)
 8000b24:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4819      	ldr	r0, [pc, #100]	@ (8000b94 <display7SEG+0x2c4>)
 8000b30:	f001 fc4f 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[2], RESET);
 8000b34:	4b16      	ldr	r3, [pc, #88]	@ (8000b90 <display7SEG+0x2c0>)
 8000b36:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4814      	ldr	r0, [pc, #80]	@ (8000b94 <display7SEG+0x2c4>)
 8000b42:	f001 fc46 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[3], SET);
 8000b46:	4b12      	ldr	r3, [pc, #72]	@ (8000b90 <display7SEG+0x2c0>)
 8000b48:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	2202      	movs	r2, #2
 8000b50:	4619      	mov	r1, r3
 8000b52:	4810      	ldr	r0, [pc, #64]	@ (8000b94 <display7SEG+0x2c4>)
 8000b54:	f001 fc3d 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[4], SET);
 8000b58:	4b0d      	ldr	r3, [pc, #52]	@ (8000b90 <display7SEG+0x2c0>)
 8000b5a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	2202      	movs	r2, #2
 8000b62:	4619      	mov	r1, r3
 8000b64:	480b      	ldr	r0, [pc, #44]	@ (8000b94 <display7SEG+0x2c4>)
 8000b66:	f001 fc34 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[5], RESET);
 8000b6a:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <display7SEG+0x2c0>)
 8000b6c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	2200      	movs	r2, #0
 8000b74:	4619      	mov	r1, r3
 8000b76:	4807      	ldr	r0, [pc, #28]	@ (8000b94 <display7SEG+0x2c4>)
 8000b78:	f001 fc2b 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[6], RESET);
 8000b7c:	4b04      	ldr	r3, [pc, #16]	@ (8000b90 <display7SEG+0x2c0>)
 8000b7e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	2200      	movs	r2, #0
 8000b86:	4619      	mov	r1, r3
 8000b88:	4802      	ldr	r0, [pc, #8]	@ (8000b94 <display7SEG+0x2c4>)
 8000b8a:	f001 fc22 	bl	80023d2 <HAL_GPIO_WritePin>
			break;
 8000b8e:	e144      	b.n	8000e1a <display7SEG+0x54a>
 8000b90:	20000000 	.word	0x20000000
 8000b94:	40010800 	.word	0x40010800
		case 5:
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[0], RESET);
 8000b98:	4ba2      	ldr	r3, [pc, #648]	@ (8000e24 <display7SEG+0x554>)
 8000b9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	48a0      	ldr	r0, [pc, #640]	@ (8000e28 <display7SEG+0x558>)
 8000ba6:	f001 fc14 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[1], SET);
 8000baa:	4b9e      	ldr	r3, [pc, #632]	@ (8000e24 <display7SEG+0x554>)
 8000bac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	2202      	movs	r2, #2
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	489c      	ldr	r0, [pc, #624]	@ (8000e28 <display7SEG+0x558>)
 8000bb8:	f001 fc0b 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[2], RESET);
 8000bbc:	4b99      	ldr	r3, [pc, #612]	@ (8000e24 <display7SEG+0x554>)
 8000bbe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4897      	ldr	r0, [pc, #604]	@ (8000e28 <display7SEG+0x558>)
 8000bca:	f001 fc02 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[3], RESET);
 8000bce:	4b95      	ldr	r3, [pc, #596]	@ (8000e24 <display7SEG+0x554>)
 8000bd0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4893      	ldr	r0, [pc, #588]	@ (8000e28 <display7SEG+0x558>)
 8000bdc:	f001 fbf9 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[4], SET);
 8000be0:	4b90      	ldr	r3, [pc, #576]	@ (8000e24 <display7SEG+0x554>)
 8000be2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	2202      	movs	r2, #2
 8000bea:	4619      	mov	r1, r3
 8000bec:	488e      	ldr	r0, [pc, #568]	@ (8000e28 <display7SEG+0x558>)
 8000bee:	f001 fbf0 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[5], RESET);
 8000bf2:	4b8c      	ldr	r3, [pc, #560]	@ (8000e24 <display7SEG+0x554>)
 8000bf4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	488a      	ldr	r0, [pc, #552]	@ (8000e28 <display7SEG+0x558>)
 8000c00:	f001 fbe7 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[6], RESET);
 8000c04:	4b87      	ldr	r3, [pc, #540]	@ (8000e24 <display7SEG+0x554>)
 8000c06:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4885      	ldr	r0, [pc, #532]	@ (8000e28 <display7SEG+0x558>)
 8000c12:	f001 fbde 	bl	80023d2 <HAL_GPIO_WritePin>
			break;
 8000c16:	e100      	b.n	8000e1a <display7SEG+0x54a>
		case 6:
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[0], RESET);
 8000c18:	4b82      	ldr	r3, [pc, #520]	@ (8000e24 <display7SEG+0x554>)
 8000c1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	2200      	movs	r2, #0
 8000c22:	4619      	mov	r1, r3
 8000c24:	4880      	ldr	r0, [pc, #512]	@ (8000e28 <display7SEG+0x558>)
 8000c26:	f001 fbd4 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[1], SET);
 8000c2a:	4b7e      	ldr	r3, [pc, #504]	@ (8000e24 <display7SEG+0x554>)
 8000c2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	2202      	movs	r2, #2
 8000c34:	4619      	mov	r1, r3
 8000c36:	487c      	ldr	r0, [pc, #496]	@ (8000e28 <display7SEG+0x558>)
 8000c38:	f001 fbcb 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[2], RESET);
 8000c3c:	4b79      	ldr	r3, [pc, #484]	@ (8000e24 <display7SEG+0x554>)
 8000c3e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	2200      	movs	r2, #0
 8000c46:	4619      	mov	r1, r3
 8000c48:	4877      	ldr	r0, [pc, #476]	@ (8000e28 <display7SEG+0x558>)
 8000c4a:	f001 fbc2 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[3], RESET);
 8000c4e:	4b75      	ldr	r3, [pc, #468]	@ (8000e24 <display7SEG+0x554>)
 8000c50:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	2200      	movs	r2, #0
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4873      	ldr	r0, [pc, #460]	@ (8000e28 <display7SEG+0x558>)
 8000c5c:	f001 fbb9 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[4], RESET);
 8000c60:	4b70      	ldr	r3, [pc, #448]	@ (8000e24 <display7SEG+0x554>)
 8000c62:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	2200      	movs	r2, #0
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	486e      	ldr	r0, [pc, #440]	@ (8000e28 <display7SEG+0x558>)
 8000c6e:	f001 fbb0 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[5], RESET);
 8000c72:	4b6c      	ldr	r3, [pc, #432]	@ (8000e24 <display7SEG+0x554>)
 8000c74:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	486a      	ldr	r0, [pc, #424]	@ (8000e28 <display7SEG+0x558>)
 8000c80:	f001 fba7 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[6], RESET);
 8000c84:	4b67      	ldr	r3, [pc, #412]	@ (8000e24 <display7SEG+0x554>)
 8000c86:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4865      	ldr	r0, [pc, #404]	@ (8000e28 <display7SEG+0x558>)
 8000c92:	f001 fb9e 	bl	80023d2 <HAL_GPIO_WritePin>
			break;
 8000c96:	e0c0      	b.n	8000e1a <display7SEG+0x54a>
		case 7:
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[0], RESET);
 8000c98:	4b62      	ldr	r3, [pc, #392]	@ (8000e24 <display7SEG+0x554>)
 8000c9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4860      	ldr	r0, [pc, #384]	@ (8000e28 <display7SEG+0x558>)
 8000ca6:	f001 fb94 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[1], RESET);
 8000caa:	4b5e      	ldr	r3, [pc, #376]	@ (8000e24 <display7SEG+0x554>)
 8000cac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	485c      	ldr	r0, [pc, #368]	@ (8000e28 <display7SEG+0x558>)
 8000cb8:	f001 fb8b 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[2], RESET);
 8000cbc:	4b59      	ldr	r3, [pc, #356]	@ (8000e24 <display7SEG+0x554>)
 8000cbe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4857      	ldr	r0, [pc, #348]	@ (8000e28 <display7SEG+0x558>)
 8000cca:	f001 fb82 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[3], SET);
 8000cce:	4b55      	ldr	r3, [pc, #340]	@ (8000e24 <display7SEG+0x554>)
 8000cd0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4853      	ldr	r0, [pc, #332]	@ (8000e28 <display7SEG+0x558>)
 8000cdc:	f001 fb79 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[4], SET);
 8000ce0:	4b50      	ldr	r3, [pc, #320]	@ (8000e24 <display7SEG+0x554>)
 8000ce2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	2202      	movs	r2, #2
 8000cea:	4619      	mov	r1, r3
 8000cec:	484e      	ldr	r0, [pc, #312]	@ (8000e28 <display7SEG+0x558>)
 8000cee:	f001 fb70 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[5], SET);
 8000cf2:	4b4c      	ldr	r3, [pc, #304]	@ (8000e24 <display7SEG+0x554>)
 8000cf4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	2202      	movs	r2, #2
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	484a      	ldr	r0, [pc, #296]	@ (8000e28 <display7SEG+0x558>)
 8000d00:	f001 fb67 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[6], SET);
 8000d04:	4b47      	ldr	r3, [pc, #284]	@ (8000e24 <display7SEG+0x554>)
 8000d06:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	2202      	movs	r2, #2
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4845      	ldr	r0, [pc, #276]	@ (8000e28 <display7SEG+0x558>)
 8000d12:	f001 fb5e 	bl	80023d2 <HAL_GPIO_WritePin>
			break;
 8000d16:	e080      	b.n	8000e1a <display7SEG+0x54a>
		case 8:
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[0], RESET);
 8000d18:	4b42      	ldr	r3, [pc, #264]	@ (8000e24 <display7SEG+0x554>)
 8000d1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	2200      	movs	r2, #0
 8000d22:	4619      	mov	r1, r3
 8000d24:	4840      	ldr	r0, [pc, #256]	@ (8000e28 <display7SEG+0x558>)
 8000d26:	f001 fb54 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[1], RESET);
 8000d2a:	4b3e      	ldr	r3, [pc, #248]	@ (8000e24 <display7SEG+0x554>)
 8000d2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	2200      	movs	r2, #0
 8000d34:	4619      	mov	r1, r3
 8000d36:	483c      	ldr	r0, [pc, #240]	@ (8000e28 <display7SEG+0x558>)
 8000d38:	f001 fb4b 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[2], RESET);
 8000d3c:	4b39      	ldr	r3, [pc, #228]	@ (8000e24 <display7SEG+0x554>)
 8000d3e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	2200      	movs	r2, #0
 8000d46:	4619      	mov	r1, r3
 8000d48:	4837      	ldr	r0, [pc, #220]	@ (8000e28 <display7SEG+0x558>)
 8000d4a:	f001 fb42 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[3], RESET);
 8000d4e:	4b35      	ldr	r3, [pc, #212]	@ (8000e24 <display7SEG+0x554>)
 8000d50:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	2200      	movs	r2, #0
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4833      	ldr	r0, [pc, #204]	@ (8000e28 <display7SEG+0x558>)
 8000d5c:	f001 fb39 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[4], RESET);
 8000d60:	4b30      	ldr	r3, [pc, #192]	@ (8000e24 <display7SEG+0x554>)
 8000d62:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	2200      	movs	r2, #0
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	482e      	ldr	r0, [pc, #184]	@ (8000e28 <display7SEG+0x558>)
 8000d6e:	f001 fb30 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[5], RESET);
 8000d72:	4b2c      	ldr	r3, [pc, #176]	@ (8000e24 <display7SEG+0x554>)
 8000d74:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	482a      	ldr	r0, [pc, #168]	@ (8000e28 <display7SEG+0x558>)
 8000d80:	f001 fb27 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[6], RESET);
 8000d84:	4b27      	ldr	r3, [pc, #156]	@ (8000e24 <display7SEG+0x554>)
 8000d86:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4825      	ldr	r0, [pc, #148]	@ (8000e28 <display7SEG+0x558>)
 8000d92:	f001 fb1e 	bl	80023d2 <HAL_GPIO_WritePin>
			break;
 8000d96:	e040      	b.n	8000e1a <display7SEG+0x54a>
		case 9:
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[0], RESET);
 8000d98:	4b22      	ldr	r3, [pc, #136]	@ (8000e24 <display7SEG+0x554>)
 8000d9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	2200      	movs	r2, #0
 8000da2:	4619      	mov	r1, r3
 8000da4:	4820      	ldr	r0, [pc, #128]	@ (8000e28 <display7SEG+0x558>)
 8000da6:	f001 fb14 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[1], RESET);
 8000daa:	4b1e      	ldr	r3, [pc, #120]	@ (8000e24 <display7SEG+0x554>)
 8000dac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	2200      	movs	r2, #0
 8000db4:	4619      	mov	r1, r3
 8000db6:	481c      	ldr	r0, [pc, #112]	@ (8000e28 <display7SEG+0x558>)
 8000db8:	f001 fb0b 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[2], RESET);
 8000dbc:	4b19      	ldr	r3, [pc, #100]	@ (8000e24 <display7SEG+0x554>)
 8000dbe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4817      	ldr	r0, [pc, #92]	@ (8000e28 <display7SEG+0x558>)
 8000dca:	f001 fb02 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[3], RESET);
 8000dce:	4b15      	ldr	r3, [pc, #84]	@ (8000e24 <display7SEG+0x554>)
 8000dd0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4813      	ldr	r0, [pc, #76]	@ (8000e28 <display7SEG+0x558>)
 8000ddc:	f001 faf9 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[4], SET);
 8000de0:	4b10      	ldr	r3, [pc, #64]	@ (8000e24 <display7SEG+0x554>)
 8000de2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	2202      	movs	r2, #2
 8000dea:	4619      	mov	r1, r3
 8000dec:	480e      	ldr	r0, [pc, #56]	@ (8000e28 <display7SEG+0x558>)
 8000dee:	f001 faf0 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[5], RESET);
 8000df2:	4b0c      	ldr	r3, [pc, #48]	@ (8000e24 <display7SEG+0x554>)
 8000df4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	480a      	ldr	r0, [pc, #40]	@ (8000e28 <display7SEG+0x558>)
 8000e00:	f001 fae7 	bl	80023d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array_seg_pin[6], RESET);
 8000e04:	4b07      	ldr	r3, [pc, #28]	@ (8000e24 <display7SEG+0x554>)
 8000e06:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4805      	ldr	r0, [pc, #20]	@ (8000e28 <display7SEG+0x558>)
 8000e12:	f001 fade 	bl	80023d2 <HAL_GPIO_WritePin>
			break;
 8000e16:	e000      	b.n	8000e1a <display7SEG+0x54a>

		default:
			break;
 8000e18:	bf00      	nop
	}
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000000 	.word	0x20000000
 8000e28:	40010800 	.word	0x40010800

08000e2c <run_led>:
int LED_EN=0;

void run_led(int time, int mode){  // create set_up_timer for enable in INT
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]

	if(actions[TIME_SEGMENT].timer_flag==1){
 8000e36:	4b29      	ldr	r3, [pc, #164]	@ (8000edc <run_led+0xb0>)
 8000e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d141      	bne.n	8000ec2 <run_led+0x96>
		buffer_led[0]=time/10;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a27      	ldr	r2, [pc, #156]	@ (8000ee0 <run_led+0xb4>)
 8000e42:	fb82 1203 	smull	r1, r2, r2, r3
 8000e46:	1092      	asrs	r2, r2, #2
 8000e48:	17db      	asrs	r3, r3, #31
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	4a25      	ldr	r2, [pc, #148]	@ (8000ee4 <run_led+0xb8>)
 8000e4e:	6013      	str	r3, [r2, #0]
		buffer_led[1]=time%10;
 8000e50:	6879      	ldr	r1, [r7, #4]
 8000e52:	4b23      	ldr	r3, [pc, #140]	@ (8000ee0 <run_led+0xb4>)
 8000e54:	fb83 2301 	smull	r2, r3, r3, r1
 8000e58:	109a      	asrs	r2, r3, #2
 8000e5a:	17cb      	asrs	r3, r1, #31
 8000e5c:	1ad2      	subs	r2, r2, r3
 8000e5e:	4613      	mov	r3, r2
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	4413      	add	r3, r2
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	1aca      	subs	r2, r1, r3
 8000e68:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee4 <run_led+0xb8>)
 8000e6a:	605a      	str	r2, [r3, #4]
		buffer_led[2]=mode/10;
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ee0 <run_led+0xb4>)
 8000e70:	fb82 1203 	smull	r1, r2, r2, r3
 8000e74:	1092      	asrs	r2, r2, #2
 8000e76:	17db      	asrs	r3, r3, #31
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	4a1a      	ldr	r2, [pc, #104]	@ (8000ee4 <run_led+0xb8>)
 8000e7c:	6093      	str	r3, [r2, #8]
		buffer_led[3]=mode%10;
 8000e7e:	6839      	ldr	r1, [r7, #0]
 8000e80:	4b17      	ldr	r3, [pc, #92]	@ (8000ee0 <run_led+0xb4>)
 8000e82:	fb83 2301 	smull	r2, r3, r3, r1
 8000e86:	109a      	asrs	r2, r3, #2
 8000e88:	17cb      	asrs	r3, r1, #31
 8000e8a:	1ad2      	subs	r2, r2, r3
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	4413      	add	r3, r2
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	1aca      	subs	r2, r1, r3
 8000e96:	4b13      	ldr	r3, [pc, #76]	@ (8000ee4 <run_led+0xb8>)
 8000e98:	60da      	str	r2, [r3, #12]
		LED_EN=(LED_EN+1)%4;
 8000e9a:	4b13      	ldr	r3, [pc, #76]	@ (8000ee8 <run_led+0xbc>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	425a      	negs	r2, r3
 8000ea2:	f003 0303 	and.w	r3, r3, #3
 8000ea6:	f002 0203 	and.w	r2, r2, #3
 8000eaa:	bf58      	it	pl
 8000eac:	4253      	negpl	r3, r2
 8000eae:	4a0e      	ldr	r2, [pc, #56]	@ (8000ee8 <run_led+0xbc>)
 8000eb0:	6013      	str	r3, [r2, #0]
		reset(TIME_SEGMENT);
 8000eb2:	2003      	movs	r0, #3
 8000eb4:	f000 fef6 	bl	8001ca4 <reset>
		Enable_led(LED_EN);
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee8 <run_led+0xbc>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fcdd 	bl	800087c <Enable_led>
	}

	display7SEG(buffer_led[LED_EN]);
 8000ec2:	4b09      	ldr	r3, [pc, #36]	@ (8000ee8 <run_led+0xbc>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a07      	ldr	r2, [pc, #28]	@ (8000ee4 <run_led+0xb8>)
 8000ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fcff 	bl	80008d0 <display7SEG>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000124 	.word	0x20000124
 8000ee0:	66666667 	.word	0x66666667
 8000ee4:	20000060 	.word	0x20000060
 8000ee8:	20000070 	.word	0x20000070

08000eec <isButton_Pressed>:
};


Key_Input button[NO_BUTTON];

int isButton_Pressed(int index){
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	if((index>2)&& (index<0)){
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	dd05      	ble.n	8000f06 <isButton_Pressed+0x1a>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	da02      	bge.n	8000f06 <isButton_Pressed+0x1a>
		return -1;
 8000f00:	f04f 33ff 	mov.w	r3, #4294967295
 8000f04:	e017      	b.n	8000f36 <isButton_Pressed+0x4a>
	}
	if(button[index].flag==1){
 8000f06:	490e      	ldr	r1, [pc, #56]	@ (8000f40 <isButton_Pressed+0x54>)
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	4413      	add	r3, r2
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	440b      	add	r3, r1
 8000f14:	3314      	adds	r3, #20
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d10b      	bne.n	8000f34 <isButton_Pressed+0x48>
		button[index].flag=0;
 8000f1c:	4908      	ldr	r1, [pc, #32]	@ (8000f40 <isButton_Pressed+0x54>)
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	4613      	mov	r3, r2
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	4413      	add	r3, r2
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	440b      	add	r3, r1
 8000f2a:	3314      	adds	r3, #20
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
		return 1;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e000      	b.n	8000f36 <isButton_Pressed+0x4a>
	}
	return 0;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr
 8000f40:	20000074 	.word	0x20000074

08000f44 <is_MODE_Pressed>:
int is_MODE_Pressed(){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	return isButton_Pressed(MODE);
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f7ff ffcf 	bl	8000eec <isButton_Pressed>
 8000f4e:	4603      	mov	r3, r0
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <is_TIME_Pressed>:
int is_TIME_Pressed(){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	return isButton_Pressed(TIME);
 8000f58:	2001      	movs	r0, #1
 8000f5a:	f7ff ffc7 	bl	8000eec <isButton_Pressed>
 8000f5e:	4603      	mov	r3, r0
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <is_SET_Pressed>:
int is_SET_Pressed(){
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
	return isButton_Pressed(SET);
 8000f68:	2002      	movs	r0, #2
 8000f6a:	f7ff ffbf 	bl	8000eec <isButton_Pressed>
 8000f6e:	4603      	mov	r3, r0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <getKeyInput>:
void getKeyInput(){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
	for(int i=0; i< NO_BUTTON; i++){
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	e0e4      	b.n	800114a <getKeyInput+0x1d6>
		button[i].KeyReg2= button[i].KeyReg1;
 8000f80:	4976      	ldr	r1, [pc, #472]	@ (800115c <getKeyInput+0x1e8>)
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	4613      	mov	r3, r2
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	4413      	add	r3, r2
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	440b      	add	r3, r1
 8000f8e:	3304      	adds	r3, #4
 8000f90:	6819      	ldr	r1, [r3, #0]
 8000f92:	4872      	ldr	r0, [pc, #456]	@ (800115c <getKeyInput+0x1e8>)
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	4613      	mov	r3, r2
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	4413      	add	r3, r2
 8000f9c:	00db      	lsls	r3, r3, #3
 8000f9e:	4403      	add	r3, r0
 8000fa0:	3308      	adds	r3, #8
 8000fa2:	6019      	str	r1, [r3, #0]
		button[i].KeyReg1= button[i].KeyReg0;
 8000fa4:	496d      	ldr	r1, [pc, #436]	@ (800115c <getKeyInput+0x1e8>)
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	4413      	add	r3, r2
 8000fae:	00db      	lsls	r3, r3, #3
 8000fb0:	440b      	add	r3, r1
 8000fb2:	6819      	ldr	r1, [r3, #0]
 8000fb4:	4869      	ldr	r0, [pc, #420]	@ (800115c <getKeyInput+0x1e8>)
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	4413      	add	r3, r2
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	4403      	add	r3, r0
 8000fc2:	3304      	adds	r3, #4
 8000fc4:	6019      	str	r1, [r3, #0]
		button[i].KeyReg0 = HAL_GPIO_ReadPin(GPIOB, pin_of_button[i]);
 8000fc6:	4a66      	ldr	r2, [pc, #408]	@ (8001160 <getKeyInput+0x1ec>)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4864      	ldr	r0, [pc, #400]	@ (8001164 <getKeyInput+0x1f0>)
 8000fd4:	f001 f9e6 	bl	80023a4 <HAL_GPIO_ReadPin>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	495f      	ldr	r1, [pc, #380]	@ (800115c <getKeyInput+0x1e8>)
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	4413      	add	r3, r2
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	440b      	add	r3, r1
 8000fea:	6018      	str	r0, [r3, #0]

		if((button[i].KeyReg0 == button[i].KeyReg1)&&
 8000fec:	495b      	ldr	r1, [pc, #364]	@ (800115c <getKeyInput+0x1e8>)
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	4413      	add	r3, r2
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	440b      	add	r3, r1
 8000ffa:	6819      	ldr	r1, [r3, #0]
 8000ffc:	4857      	ldr	r0, [pc, #348]	@ (800115c <getKeyInput+0x1e8>)
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	4613      	mov	r3, r2
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	4413      	add	r3, r2
 8001006:	00db      	lsls	r3, r3, #3
 8001008:	4403      	add	r3, r0
 800100a:	3304      	adds	r3, #4
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4299      	cmp	r1, r3
 8001010:	f040 8098 	bne.w	8001144 <getKeyInput+0x1d0>
				(button[i].KeyReg1==button[i].KeyReg2))
 8001014:	4951      	ldr	r1, [pc, #324]	@ (800115c <getKeyInput+0x1e8>)
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	4613      	mov	r3, r2
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	4413      	add	r3, r2
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	440b      	add	r3, r1
 8001022:	3304      	adds	r3, #4
 8001024:	6819      	ldr	r1, [r3, #0]
 8001026:	484d      	ldr	r0, [pc, #308]	@ (800115c <getKeyInput+0x1e8>)
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	4613      	mov	r3, r2
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	4413      	add	r3, r2
 8001030:	00db      	lsls	r3, r3, #3
 8001032:	4403      	add	r3, r0
 8001034:	3308      	adds	r3, #8
 8001036:	681b      	ldr	r3, [r3, #0]
		if((button[i].KeyReg0 == button[i].KeyReg1)&&
 8001038:	4299      	cmp	r1, r3
 800103a:	f040 8083 	bne.w	8001144 <getKeyInput+0x1d0>
		{
				if(button[i].KeyReg2!= button[i].KeyReg3){
 800103e:	4947      	ldr	r1, [pc, #284]	@ (800115c <getKeyInput+0x1e8>)
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	4613      	mov	r3, r2
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	4413      	add	r3, r2
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	440b      	add	r3, r1
 800104c:	3308      	adds	r3, #8
 800104e:	6819      	ldr	r1, [r3, #0]
 8001050:	4842      	ldr	r0, [pc, #264]	@ (800115c <getKeyInput+0x1e8>)
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	4613      	mov	r3, r2
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	4413      	add	r3, r2
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	4403      	add	r3, r0
 800105e:	330c      	adds	r3, #12
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4299      	cmp	r1, r3
 8001064:	d031      	beq.n	80010ca <getKeyInput+0x156>
					button[i].KeyReg3= button[i].KeyReg2;
 8001066:	493d      	ldr	r1, [pc, #244]	@ (800115c <getKeyInput+0x1e8>)
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	4613      	mov	r3, r2
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	4413      	add	r3, r2
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	440b      	add	r3, r1
 8001074:	3308      	adds	r3, #8
 8001076:	6819      	ldr	r1, [r3, #0]
 8001078:	4838      	ldr	r0, [pc, #224]	@ (800115c <getKeyInput+0x1e8>)
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	4613      	mov	r3, r2
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	4413      	add	r3, r2
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	4403      	add	r3, r0
 8001086:	330c      	adds	r3, #12
 8001088:	6019      	str	r1, [r3, #0]

					if(button[i].KeyReg3 == PRESSED_STATE){
 800108a:	4934      	ldr	r1, [pc, #208]	@ (800115c <getKeyInput+0x1e8>)
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	4613      	mov	r3, r2
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	4413      	add	r3, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	440b      	add	r3, r1
 8001098:	330c      	adds	r3, #12
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d151      	bne.n	8001144 <getKeyInput+0x1d0>
						button[i].timelongpress=TimeOutForKeyPress;
 80010a0:	492e      	ldr	r1, [pc, #184]	@ (800115c <getKeyInput+0x1e8>)
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	4613      	mov	r3, r2
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	4413      	add	r3, r2
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	440b      	add	r3, r1
 80010ae:	3310      	adds	r3, #16
 80010b0:	2232      	movs	r2, #50	@ 0x32
 80010b2:	601a      	str	r2, [r3, #0]
						button[i].flag=1;
 80010b4:	4929      	ldr	r1, [pc, #164]	@ (800115c <getKeyInput+0x1e8>)
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	4613      	mov	r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4413      	add	r3, r2
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	440b      	add	r3, r1
 80010c2:	3314      	adds	r3, #20
 80010c4:	2201      	movs	r2, #1
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	e03c      	b.n	8001144 <getKeyInput+0x1d0>
					}
				}else{
					button[i].timelongpress--;
 80010ca:	4924      	ldr	r1, [pc, #144]	@ (800115c <getKeyInput+0x1e8>)
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	4613      	mov	r3, r2
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	4413      	add	r3, r2
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	440b      	add	r3, r1
 80010d8:	3310      	adds	r3, #16
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	1e59      	subs	r1, r3, #1
 80010de:	481f      	ldr	r0, [pc, #124]	@ (800115c <getKeyInput+0x1e8>)
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	4613      	mov	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4413      	add	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	4403      	add	r3, r0
 80010ec:	3310      	adds	r3, #16
 80010ee:	6019      	str	r1, [r3, #0]
					if(button[i].timelongpress <=0){
 80010f0:	491a      	ldr	r1, [pc, #104]	@ (800115c <getKeyInput+0x1e8>)
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	4613      	mov	r3, r2
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	4413      	add	r3, r2
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	440b      	add	r3, r1
 80010fe:	3310      	adds	r3, #16
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	dc1e      	bgt.n	8001144 <getKeyInput+0x1d0>
						button[i].timelongpress=TimeOutForKeyPress;
 8001106:	4915      	ldr	r1, [pc, #84]	@ (800115c <getKeyInput+0x1e8>)
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	4613      	mov	r3, r2
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	4413      	add	r3, r2
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	440b      	add	r3, r1
 8001114:	3310      	adds	r3, #16
 8001116:	2232      	movs	r2, #50	@ 0x32
 8001118:	601a      	str	r2, [r3, #0]
						if(button[i].KeyReg3== PRESSED_STATE){
 800111a:	4910      	ldr	r1, [pc, #64]	@ (800115c <getKeyInput+0x1e8>)
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	4613      	mov	r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	4413      	add	r3, r2
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	440b      	add	r3, r1
 8001128:	330c      	adds	r3, #12
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d109      	bne.n	8001144 <getKeyInput+0x1d0>
							button[i].flag=1;
 8001130:	490a      	ldr	r1, [pc, #40]	@ (800115c <getKeyInput+0x1e8>)
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	4613      	mov	r3, r2
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	4413      	add	r3, r2
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	440b      	add	r3, r1
 800113e:	3314      	adds	r3, #20
 8001140:	2201      	movs	r2, #1
 8001142:	601a      	str	r2, [r3, #0]
	for(int i=0; i< NO_BUTTON; i++){
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3301      	adds	r3, #1
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b02      	cmp	r3, #2
 800114e:	f77f af17 	ble.w	8000f80 <getKeyInput+0xc>
					}
				}
		}

	}
}
 8001152:	bf00      	nop
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000074 	.word	0x20000074
 8001160:	20000018 	.word	0x20000018
 8001164:	40010c00 	.word	0x40010c00

08001168 <fsm_automatic_run>:

int state_automatic=0;
int lane1=0;
int lane2=0;

void fsm_automatic_run(){
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
    if(is_MODE_Pressed()){
 800116c:	f7ff feea 	bl	8000f44 <is_MODE_Pressed>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d005      	beq.n	8001182 <fsm_automatic_run+0x1a>
        pro_mode=MANUAL_MODE;
 8001176:	4b20      	ldr	r3, [pc, #128]	@ (80011f8 <fsm_automatic_run+0x90>)
 8001178:	2202      	movs	r2, #2
 800117a:	601a      	str	r2, [r3, #0]
        init_fsm_manual();
 800117c:	f000 f938 	bl	80013f0 <init_fsm_manual>
        return;
 8001180:	e039      	b.n	80011f6 <fsm_automatic_run+0x8e>
    }
    if(actions[ONE_SECOND].timer_flag==1){
 8001182:	4b1e      	ldr	r3, [pc, #120]	@ (80011fc <fsm_automatic_run+0x94>)
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d10c      	bne.n	80011a4 <fsm_automatic_run+0x3c>
    	lane1--;
 800118a:	4b1d      	ldr	r3, [pc, #116]	@ (8001200 <fsm_automatic_run+0x98>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	3b01      	subs	r3, #1
 8001190:	4a1b      	ldr	r2, [pc, #108]	@ (8001200 <fsm_automatic_run+0x98>)
 8001192:	6013      	str	r3, [r2, #0]
    	lane2--;
 8001194:	4b1b      	ldr	r3, [pc, #108]	@ (8001204 <fsm_automatic_run+0x9c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	3b01      	subs	r3, #1
 800119a:	4a1a      	ldr	r2, [pc, #104]	@ (8001204 <fsm_automatic_run+0x9c>)
 800119c:	6013      	str	r3, [r2, #0]
    	reset(ONE_SECOND);
 800119e:	2001      	movs	r0, #1
 80011a0:	f000 fd80 	bl	8001ca4 <reset>
    }
    if(actions[TIME_COUNT_PROGRAM].timer_flag==1){
 80011a4:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <fsm_automatic_run+0x94>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d11c      	bne.n	80011e6 <fsm_automatic_run+0x7e>
        switch (state_automatic)
 80011ac:	4b16      	ldr	r3, [pc, #88]	@ (8001208 <fsm_automatic_run+0xa0>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b03      	cmp	r3, #3
 80011b2:	d817      	bhi.n	80011e4 <fsm_automatic_run+0x7c>
 80011b4:	a201      	add	r2, pc, #4	@ (adr r2, 80011bc <fsm_automatic_run+0x54>)
 80011b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ba:	bf00      	nop
 80011bc:	080011cd 	.word	0x080011cd
 80011c0:	080011d3 	.word	0x080011d3
 80011c4:	080011d9 	.word	0x080011d9
 80011c8:	080011df 	.word	0x080011df
        {
        case RED_GREEN:
            init_RED_YELLOW();
 80011cc:	f000 f878 	bl	80012c0 <init_RED_YELLOW>
            break;
 80011d0:	e009      	b.n	80011e6 <fsm_automatic_run+0x7e>
        case RED_YELLOW:
            init_GREEN_RED();
 80011d2:	f000 f8a5 	bl	8001320 <init_GREEN_RED>
            break;
 80011d6:	e006      	b.n	80011e6 <fsm_automatic_run+0x7e>
        case GREEN_RED:
            init_YELLOW_RED();
 80011d8:	f000 f8da 	bl	8001390 <init_YELLOW_RED>
            break;
 80011dc:	e003      	b.n	80011e6 <fsm_automatic_run+0x7e>
        case YELLOW_RED:
            init_RED_GREEN();
 80011de:	f000 f837 	bl	8001250 <init_RED_GREEN>
            break;
 80011e2:	e000      	b.n	80011e6 <fsm_automatic_run+0x7e>
        default:
            break;
 80011e4:	bf00      	nop
        }
    }

    run_led(lane1, lane2);
 80011e6:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <fsm_automatic_run+0x98>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a06      	ldr	r2, [pc, #24]	@ (8001204 <fsm_automatic_run+0x9c>)
 80011ec:	6812      	ldr	r2, [r2, #0]
 80011ee:	4611      	mov	r1, r2
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fe1b 	bl	8000e2c <run_led>
}
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	200000d8 	.word	0x200000d8
 80011fc:	20000124 	.word	0x20000124
 8001200:	200000c0 	.word	0x200000c0
 8001204:	200000c4 	.word	0x200000c4
 8001208:	200000bc 	.word	0x200000bc

0800120c <come_back_auto>:
void come_back_auto(){
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
    switch (state_automatic)
 8001210:	4b0e      	ldr	r3, [pc, #56]	@ (800124c <come_back_auto+0x40>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b03      	cmp	r3, #3
 8001216:	d816      	bhi.n	8001246 <come_back_auto+0x3a>
 8001218:	a201      	add	r2, pc, #4	@ (adr r2, 8001220 <come_back_auto+0x14>)
 800121a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121e:	bf00      	nop
 8001220:	08001231 	.word	0x08001231
 8001224:	08001237 	.word	0x08001237
 8001228:	0800123d 	.word	0x0800123d
 800122c:	08001243 	.word	0x08001243
    {
    case RED_GREEN:
        init_RED_GREEN();
 8001230:	f000 f80e 	bl	8001250 <init_RED_GREEN>
        break;
 8001234:	e008      	b.n	8001248 <come_back_auto+0x3c>
    case RED_YELLOW:
        init_RED_YELLOW();
 8001236:	f000 f843 	bl	80012c0 <init_RED_YELLOW>
        break;
 800123a:	e005      	b.n	8001248 <come_back_auto+0x3c>
    case GREEN_RED:
        init_GREEN_RED();
 800123c:	f000 f870 	bl	8001320 <init_GREEN_RED>
        break;
 8001240:	e002      	b.n	8001248 <come_back_auto+0x3c>
    case YELLOW_RED:
        init_YELLOW_RED();
 8001242:	f000 f8a5 	bl	8001390 <init_YELLOW_RED>
    default:
        break;
 8001246:	bf00      	nop
    }
}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200000bc 	.word	0x200000bc

08001250 <init_RED_GREEN>:

void init_RED_GREEN(){
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
    turn_on_LED(RED_1);
 8001254:	2000      	movs	r0, #0
 8001256:	f000 fa75 	bl	8001744 <turn_on_LED>
    turn_on_LED(GREEN_2);
 800125a:	2003      	movs	r0, #3
 800125c:	f000 fa72 	bl	8001744 <turn_on_LED>

    turn_off_LED(RED_2);
 8001260:	2001      	movs	r0, #1
 8001262:	f000 fa85 	bl	8001770 <turn_off_LED>
    turn_off_LED(GREEN_1);
 8001266:	2002      	movs	r0, #2
 8001268:	f000 fa82 	bl	8001770 <turn_off_LED>
    turn_off_LED(YELLOW_1);
 800126c:	2004      	movs	r0, #4
 800126e:	f000 fa7f 	bl	8001770 <turn_off_LED>
    turn_off_LED(YELLOW_2);
 8001272:	2005      	movs	r0, #5
 8001274:	f000 fa7c 	bl	8001770 <turn_off_LED>
    
    state_automatic=RED_GREEN;
 8001278:	4b0c      	ldr	r3, [pc, #48]	@ (80012ac <init_RED_GREEN+0x5c>)
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
    Setup_time(TIME_COUNT_PROGRAM, Time_green*1000);
 800127e:	4b0c      	ldr	r3, [pc, #48]	@ (80012b0 <init_RED_GREEN+0x60>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001286:	fb02 f303 	mul.w	r3, r2, r3
 800128a:	4619      	mov	r1, r3
 800128c:	2000      	movs	r0, #0
 800128e:	f000 fcd1 	bl	8001c34 <Setup_time>
    lane1=Time_red;
 8001292:	4b08      	ldr	r3, [pc, #32]	@ (80012b4 <init_RED_GREEN+0x64>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a08      	ldr	r2, [pc, #32]	@ (80012b8 <init_RED_GREEN+0x68>)
 8001298:	6013      	str	r3, [r2, #0]
    lane2=Time_green;
 800129a:	4b05      	ldr	r3, [pc, #20]	@ (80012b0 <init_RED_GREEN+0x60>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a07      	ldr	r2, [pc, #28]	@ (80012bc <init_RED_GREEN+0x6c>)
 80012a0:	6013      	str	r3, [r2, #0]
    reset(ONE_SECOND);
 80012a2:	2001      	movs	r0, #1
 80012a4:	f000 fcfe 	bl	8001ca4 <reset>

}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	200000bc 	.word	0x200000bc
 80012b0:	20000024 	.word	0x20000024
 80012b4:	20000020 	.word	0x20000020
 80012b8:	200000c0 	.word	0x200000c0
 80012bc:	200000c4 	.word	0x200000c4

080012c0 <init_RED_YELLOW>:
void init_RED_YELLOW(){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
    turn_on_LED(RED_1);
 80012c4:	2000      	movs	r0, #0
 80012c6:	f000 fa3d 	bl	8001744 <turn_on_LED>
    turn_on_LED(YELLOW_2);
 80012ca:	2005      	movs	r0, #5
 80012cc:	f000 fa3a 	bl	8001744 <turn_on_LED>
    //led turn on
    turn_off_LED(RED_2);
 80012d0:	2001      	movs	r0, #1
 80012d2:	f000 fa4d 	bl	8001770 <turn_off_LED>
    turn_off_LED(GREEN_1);
 80012d6:	2002      	movs	r0, #2
 80012d8:	f000 fa4a 	bl	8001770 <turn_off_LED>
    turn_off_LED(YELLOW_1);
 80012dc:	2004      	movs	r0, #4
 80012de:	f000 fa47 	bl	8001770 <turn_off_LED>
    turn_off_LED(GREEN_2);
 80012e2:	2003      	movs	r0, #3
 80012e4:	f000 fa44 	bl	8001770 <turn_off_LED>
    //led turn off
    state_automatic=RED_YELLOW;
 80012e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001314 <init_RED_YELLOW+0x54>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	601a      	str	r2, [r3, #0]
    Setup_time(TIME_COUNT_PROGRAM, Time_yellow*1000);
 80012ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001318 <init_RED_YELLOW+0x58>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012f6:	fb02 f303 	mul.w	r3, r2, r3
 80012fa:	4619      	mov	r1, r3
 80012fc:	2000      	movs	r0, #0
 80012fe:	f000 fc99 	bl	8001c34 <Setup_time>
    lane2=Time_yellow;
 8001302:	4b05      	ldr	r3, [pc, #20]	@ (8001318 <init_RED_YELLOW+0x58>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a05      	ldr	r2, [pc, #20]	@ (800131c <init_RED_YELLOW+0x5c>)
 8001308:	6013      	str	r3, [r2, #0]
    reset(ONE_SECOND);
 800130a:	2001      	movs	r0, #1
 800130c:	f000 fcca 	bl	8001ca4 <reset>
}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}
 8001314:	200000bc 	.word	0x200000bc
 8001318:	20000028 	.word	0x20000028
 800131c:	200000c4 	.word	0x200000c4

08001320 <init_GREEN_RED>:
void init_GREEN_RED(){
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
    turn_on_LED(GREEN_1);
 8001324:	2002      	movs	r0, #2
 8001326:	f000 fa0d 	bl	8001744 <turn_on_LED>
    turn_on_LED(RED_2);
 800132a:	2001      	movs	r0, #1
 800132c:	f000 fa0a 	bl	8001744 <turn_on_LED>
    //led turn on
    turn_off_LED(RED_1);
 8001330:	2000      	movs	r0, #0
 8001332:	f000 fa1d 	bl	8001770 <turn_off_LED>
    turn_off_LED(GREEN_2);
 8001336:	2003      	movs	r0, #3
 8001338:	f000 fa1a 	bl	8001770 <turn_off_LED>
    turn_off_LED(YELLOW_1);
 800133c:	2004      	movs	r0, #4
 800133e:	f000 fa17 	bl	8001770 <turn_off_LED>
    turn_off_LED(YELLOW_2);
 8001342:	2005      	movs	r0, #5
 8001344:	f000 fa14 	bl	8001770 <turn_off_LED>
    //led turn off
    state_automatic=GREEN_RED;
 8001348:	4b0c      	ldr	r3, [pc, #48]	@ (800137c <init_GREEN_RED+0x5c>)
 800134a:	2202      	movs	r2, #2
 800134c:	601a      	str	r2, [r3, #0]
    Setup_time(TIME_COUNT_PROGRAM, Time_green*1000);
 800134e:	4b0c      	ldr	r3, [pc, #48]	@ (8001380 <init_GREEN_RED+0x60>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001356:	fb02 f303 	mul.w	r3, r2, r3
 800135a:	4619      	mov	r1, r3
 800135c:	2000      	movs	r0, #0
 800135e:	f000 fc69 	bl	8001c34 <Setup_time>
    lane1=Time_green;
 8001362:	4b07      	ldr	r3, [pc, #28]	@ (8001380 <init_GREEN_RED+0x60>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a07      	ldr	r2, [pc, #28]	@ (8001384 <init_GREEN_RED+0x64>)
 8001368:	6013      	str	r3, [r2, #0]
    lane2=Time_red;
 800136a:	4b07      	ldr	r3, [pc, #28]	@ (8001388 <init_GREEN_RED+0x68>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a07      	ldr	r2, [pc, #28]	@ (800138c <init_GREEN_RED+0x6c>)
 8001370:	6013      	str	r3, [r2, #0]
    reset(ONE_SECOND);
 8001372:	2001      	movs	r0, #1
 8001374:	f000 fc96 	bl	8001ca4 <reset>
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	200000bc 	.word	0x200000bc
 8001380:	20000024 	.word	0x20000024
 8001384:	200000c0 	.word	0x200000c0
 8001388:	20000020 	.word	0x20000020
 800138c:	200000c4 	.word	0x200000c4

08001390 <init_YELLOW_RED>:
void init_YELLOW_RED(){
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
    turn_on_LED(RED_2);
 8001394:	2001      	movs	r0, #1
 8001396:	f000 f9d5 	bl	8001744 <turn_on_LED>
    turn_on_LED(YELLOW_1);
 800139a:	2004      	movs	r0, #4
 800139c:	f000 f9d2 	bl	8001744 <turn_on_LED>
    //led turn on
    turn_off_LED(RED_1);
 80013a0:	2000      	movs	r0, #0
 80013a2:	f000 f9e5 	bl	8001770 <turn_off_LED>
    turn_off_LED(GREEN_1);
 80013a6:	2002      	movs	r0, #2
 80013a8:	f000 f9e2 	bl	8001770 <turn_off_LED>
    turn_off_LED(YELLOW_2);
 80013ac:	2005      	movs	r0, #5
 80013ae:	f000 f9df 	bl	8001770 <turn_off_LED>
    turn_off_LED(GREEN_2);
 80013b2:	2003      	movs	r0, #3
 80013b4:	f000 f9dc 	bl	8001770 <turn_off_LED>
    //led turn off
    state_automatic=YELLOW_RED;
 80013b8:	4b0a      	ldr	r3, [pc, #40]	@ (80013e4 <init_YELLOW_RED+0x54>)
 80013ba:	2203      	movs	r2, #3
 80013bc:	601a      	str	r2, [r3, #0]
    Setup_time(TIME_COUNT_PROGRAM, Time_yellow*1000);
 80013be:	4b0a      	ldr	r3, [pc, #40]	@ (80013e8 <init_YELLOW_RED+0x58>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80013c6:	fb02 f303 	mul.w	r3, r2, r3
 80013ca:	4619      	mov	r1, r3
 80013cc:	2000      	movs	r0, #0
 80013ce:	f000 fc31 	bl	8001c34 <Setup_time>
    lane1=Time_yellow;
 80013d2:	4b05      	ldr	r3, [pc, #20]	@ (80013e8 <init_YELLOW_RED+0x58>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a05      	ldr	r2, [pc, #20]	@ (80013ec <init_YELLOW_RED+0x5c>)
 80013d8:	6013      	str	r3, [r2, #0]
    reset(ONE_SECOND);
 80013da:	2001      	movs	r0, #1
 80013dc:	f000 fc62 	bl	8001ca4 <reset>
}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	200000bc 	.word	0x200000bc
 80013e8:	20000028 	.word	0x20000028
 80013ec:	200000c0 	.word	0x200000c0

080013f0 <init_fsm_manual>:

int temp_red;
int temp_green;
int temp_yellow;
int state_manual=0;
void init_fsm_manual(){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
	state_manual=RED;
 80013f4:	4b10      	ldr	r3, [pc, #64]	@ (8001438 <init_fsm_manual+0x48>)
 80013f6:	2205      	movs	r2, #5
 80013f8:	601a      	str	r2, [r3, #0]
	init_Blink_led(state_manual);
 80013fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001438 <init_fsm_manual+0x48>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 f9e2 	bl	80017c8 <init_Blink_led>
	Setup_time(TIME_COUNT_PROGRAM, 15000);
 8001404:	f643 2198 	movw	r1, #15000	@ 0x3a98
 8001408:	2000      	movs	r0, #0
 800140a:	f000 fc13 	bl	8001c34 <Setup_time>
	Setup_time(ONE_SECOND, 1000);
 800140e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001412:	2001      	movs	r0, #1
 8001414:	f000 fc0e 	bl	8001c34 <Setup_time>
	temp_red=Time_red;
 8001418:	4b08      	ldr	r3, [pc, #32]	@ (800143c <init_fsm_manual+0x4c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a08      	ldr	r2, [pc, #32]	@ (8001440 <init_fsm_manual+0x50>)
 800141e:	6013      	str	r3, [r2, #0]
	temp_green=Time_green;
 8001420:	4b08      	ldr	r3, [pc, #32]	@ (8001444 <init_fsm_manual+0x54>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a08      	ldr	r2, [pc, #32]	@ (8001448 <init_fsm_manual+0x58>)
 8001426:	6013      	str	r3, [r2, #0]
	temp_yellow=Time_yellow;
 8001428:	4b08      	ldr	r3, [pc, #32]	@ (800144c <init_fsm_manual+0x5c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a08      	ldr	r2, [pc, #32]	@ (8001450 <init_fsm_manual+0x60>)
 800142e:	6013      	str	r3, [r2, #0]
	is_TIME_Pressed();
 8001430:	f7ff fd90 	bl	8000f54 <is_TIME_Pressed>
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	200000d4 	.word	0x200000d4
 800143c:	20000020 	.word	0x20000020
 8001440:	200000c8 	.word	0x200000c8
 8001444:	20000024 	.word	0x20000024
 8001448:	200000cc 	.word	0x200000cc
 800144c:	20000028 	.word	0x20000028
 8001450:	200000d0 	.word	0x200000d0
 8001454:	00000000 	.word	0x00000000

08001458 <fsm_manual>:

void fsm_manual(){
 8001458:	b5b0      	push	{r4, r5, r7, lr}
 800145a:	af00      	add	r7, sp, #0
	if(actions[TIME_COUNT_PROGRAM].timer_flag==1){
 800145c:	4b9c      	ldr	r3, [pc, #624]	@ (80016d0 <fsm_manual+0x278>)
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d105      	bne.n	8001470 <fsm_manual+0x18>
		pro_mode=ACTIVE_MODE;
 8001464:	4b9b      	ldr	r3, [pc, #620]	@ (80016d4 <fsm_manual+0x27c>)
 8001466:	2201      	movs	r2, #1
 8001468:	601a      	str	r2, [r3, #0]
		come_back_auto();
 800146a:	f7ff fecf 	bl	800120c <come_back_auto>
		return;
 800146e:	e12a      	b.n	80016c6 <fsm_manual+0x26e>
	}
	if(is_SET_Pressed() ){
 8001470:	f7ff fd78 	bl	8000f64 <is_SET_Pressed>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	f000 8092 	beq.w	80015a0 <fsm_manual+0x148>
		pro_mode= ACTIVE_MODE;
 800147c:	4b95      	ldr	r3, [pc, #596]	@ (80016d4 <fsm_manual+0x27c>)
 800147e:	2201      	movs	r2, #1
 8001480:	601a      	str	r2, [r3, #0]
		//continue
		// proces to make yellow, green and red is suitable for traffic lamp
		switch (state_manual)
 8001482:	4b95      	ldr	r3, [pc, #596]	@ (80016d8 <fsm_manual+0x280>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2b05      	cmp	r3, #5
 8001488:	d007      	beq.n	800149a <fsm_manual+0x42>
 800148a:	2b05      	cmp	r3, #5
 800148c:	f300 8082 	bgt.w	8001594 <fsm_manual+0x13c>
 8001490:	2b03      	cmp	r3, #3
 8001492:	d067      	beq.n	8001564 <fsm_manual+0x10c>
 8001494:	2b04      	cmp	r3, #4
 8001496:	d071      	beq.n	800157c <fsm_manual+0x124>
		case YELLOW:
			Time_yellow=temp_yellow;
			Time_red= Time_green+Time_yellow;
			break;
		default:
			break;
 8001498:	e07c      	b.n	8001594 <fsm_manual+0x13c>
			if(temp_red< Time_red){
 800149a:	4b90      	ldr	r3, [pc, #576]	@ (80016dc <fsm_manual+0x284>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	4b90      	ldr	r3, [pc, #576]	@ (80016e0 <fsm_manual+0x288>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	da23      	bge.n	80014ee <fsm_manual+0x96>
				Time_red=temp_red;
 80014a6:	4b8d      	ldr	r3, [pc, #564]	@ (80016dc <fsm_manual+0x284>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a8d      	ldr	r2, [pc, #564]	@ (80016e0 <fsm_manual+0x288>)
 80014ac:	6013      	str	r3, [r2, #0]
				Time_green= ceil(Time_red*0.6);
 80014ae:	4b8c      	ldr	r3, [pc, #560]	@ (80016e0 <fsm_manual+0x288>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff f8c8 	bl	8000648 <__aeabi_i2d>
 80014b8:	a383      	add	r3, pc, #524	@ (adr r3, 80016c8 <fsm_manual+0x270>)
 80014ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014be:	f7fe fe47 	bl	8000150 <__aeabi_dmul>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4610      	mov	r0, r2
 80014c8:	4619      	mov	r1, r3
 80014ca:	f001 ff99 	bl	8003400 <ceil>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4610      	mov	r0, r2
 80014d4:	4619      	mov	r1, r3
 80014d6:	f7ff f9a9 	bl	800082c <__aeabi_d2iz>
 80014da:	4603      	mov	r3, r0
 80014dc:	4a81      	ldr	r2, [pc, #516]	@ (80016e4 <fsm_manual+0x28c>)
 80014de:	6013      	str	r3, [r2, #0]
				Time_yellow= Time_red-Time_green;
 80014e0:	4b7f      	ldr	r3, [pc, #508]	@ (80016e0 <fsm_manual+0x288>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b7f      	ldr	r3, [pc, #508]	@ (80016e4 <fsm_manual+0x28c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	4a7f      	ldr	r2, [pc, #508]	@ (80016e8 <fsm_manual+0x290>)
 80014ec:	6013      	str	r3, [r2, #0]
			if(temp_red> Time_red){
 80014ee:	4b7b      	ldr	r3, [pc, #492]	@ (80016dc <fsm_manual+0x284>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	4b7b      	ldr	r3, [pc, #492]	@ (80016e0 <fsm_manual+0x288>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	dd4e      	ble.n	8001598 <fsm_manual+0x140>
				Time_green= Time_green +ceil((temp_red - Time_red)*0.6);
 80014fa:	4b7a      	ldr	r3, [pc, #488]	@ (80016e4 <fsm_manual+0x28c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff f8a2 	bl	8000648 <__aeabi_i2d>
 8001504:	4604      	mov	r4, r0
 8001506:	460d      	mov	r5, r1
 8001508:	4b74      	ldr	r3, [pc, #464]	@ (80016dc <fsm_manual+0x284>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4b74      	ldr	r3, [pc, #464]	@ (80016e0 <fsm_manual+0x288>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff f898 	bl	8000648 <__aeabi_i2d>
 8001518:	a36b      	add	r3, pc, #428	@ (adr r3, 80016c8 <fsm_manual+0x270>)
 800151a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151e:	f7fe fe17 	bl	8000150 <__aeabi_dmul>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4610      	mov	r0, r2
 8001528:	4619      	mov	r1, r3
 800152a:	f001 ff69 	bl	8003400 <ceil>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	4620      	mov	r0, r4
 8001534:	4629      	mov	r1, r5
 8001536:	f7fe ff3b 	bl	80003b0 <__adddf3>
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	4610      	mov	r0, r2
 8001540:	4619      	mov	r1, r3
 8001542:	f7ff f973 	bl	800082c <__aeabi_d2iz>
 8001546:	4603      	mov	r3, r0
 8001548:	4a66      	ldr	r2, [pc, #408]	@ (80016e4 <fsm_manual+0x28c>)
 800154a:	6013      	str	r3, [r2, #0]
				Time_yellow= temp_red - Time_green;
 800154c:	4b63      	ldr	r3, [pc, #396]	@ (80016dc <fsm_manual+0x284>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4b64      	ldr	r3, [pc, #400]	@ (80016e4 <fsm_manual+0x28c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	4a64      	ldr	r2, [pc, #400]	@ (80016e8 <fsm_manual+0x290>)
 8001558:	6013      	str	r3, [r2, #0]
				Time_red= temp_red;
 800155a:	4b60      	ldr	r3, [pc, #384]	@ (80016dc <fsm_manual+0x284>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a60      	ldr	r2, [pc, #384]	@ (80016e0 <fsm_manual+0x288>)
 8001560:	6013      	str	r3, [r2, #0]
			break;
 8001562:	e019      	b.n	8001598 <fsm_manual+0x140>
			Time_green=temp_green;
 8001564:	4b61      	ldr	r3, [pc, #388]	@ (80016ec <fsm_manual+0x294>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a5e      	ldr	r2, [pc, #376]	@ (80016e4 <fsm_manual+0x28c>)
 800156a:	6013      	str	r3, [r2, #0]
			Time_red= Time_green+Time_yellow;
 800156c:	4b5d      	ldr	r3, [pc, #372]	@ (80016e4 <fsm_manual+0x28c>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4b5d      	ldr	r3, [pc, #372]	@ (80016e8 <fsm_manual+0x290>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4413      	add	r3, r2
 8001576:	4a5a      	ldr	r2, [pc, #360]	@ (80016e0 <fsm_manual+0x288>)
 8001578:	6013      	str	r3, [r2, #0]
			break;
 800157a:	e00e      	b.n	800159a <fsm_manual+0x142>
			Time_yellow=temp_yellow;
 800157c:	4b5c      	ldr	r3, [pc, #368]	@ (80016f0 <fsm_manual+0x298>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a59      	ldr	r2, [pc, #356]	@ (80016e8 <fsm_manual+0x290>)
 8001582:	6013      	str	r3, [r2, #0]
			Time_red= Time_green+Time_yellow;
 8001584:	4b57      	ldr	r3, [pc, #348]	@ (80016e4 <fsm_manual+0x28c>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	4b57      	ldr	r3, [pc, #348]	@ (80016e8 <fsm_manual+0x290>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4413      	add	r3, r2
 800158e:	4a54      	ldr	r2, [pc, #336]	@ (80016e0 <fsm_manual+0x288>)
 8001590:	6013      	str	r3, [r2, #0]
			break;
 8001592:	e002      	b.n	800159a <fsm_manual+0x142>
			break;
 8001594:	bf00      	nop
 8001596:	e000      	b.n	800159a <fsm_manual+0x142>
			break;
 8001598:	bf00      	nop
		}

		come_back_auto();
 800159a:	f7ff fe37 	bl	800120c <come_back_auto>

		return;
 800159e:	e092      	b.n	80016c6 <fsm_manual+0x26e>
	}
	if(is_MODE_Pressed()){
 80015a0:	f7ff fcd0 	bl	8000f44 <is_MODE_Pressed>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d01f      	beq.n	80015ea <fsm_manual+0x192>
		switch (state_manual)
 80015aa:	4b4b      	ldr	r3, [pc, #300]	@ (80016d8 <fsm_manual+0x280>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2b05      	cmp	r3, #5
 80015b0:	d006      	beq.n	80015c0 <fsm_manual+0x168>
 80015b2:	2b05      	cmp	r3, #5
 80015b4:	dc12      	bgt.n	80015dc <fsm_manual+0x184>
 80015b6:	2b03      	cmp	r3, #3
 80015b8:	d006      	beq.n	80015c8 <fsm_manual+0x170>
 80015ba:	2b04      	cmp	r3, #4
 80015bc:	d008      	beq.n	80015d0 <fsm_manual+0x178>
			come_back_auto();
			return;

			break;
		default:
			break;
 80015be:	e00d      	b.n	80015dc <fsm_manual+0x184>
			state_manual=GREEN;
 80015c0:	4b45      	ldr	r3, [pc, #276]	@ (80016d8 <fsm_manual+0x280>)
 80015c2:	2203      	movs	r2, #3
 80015c4:	601a      	str	r2, [r3, #0]
			break;
 80015c6:	e00a      	b.n	80015de <fsm_manual+0x186>
			state_manual=YELLOW;
 80015c8:	4b43      	ldr	r3, [pc, #268]	@ (80016d8 <fsm_manual+0x280>)
 80015ca:	2204      	movs	r2, #4
 80015cc:	601a      	str	r2, [r3, #0]
			break;
 80015ce:	e006      	b.n	80015de <fsm_manual+0x186>
			pro_mode=ACTIVE_MODE;
 80015d0:	4b40      	ldr	r3, [pc, #256]	@ (80016d4 <fsm_manual+0x27c>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	601a      	str	r2, [r3, #0]
			come_back_auto();
 80015d6:	f7ff fe19 	bl	800120c <come_back_auto>
			return;
 80015da:	e074      	b.n	80016c6 <fsm_manual+0x26e>
			break;
 80015dc:	bf00      	nop
		}
		init_Blink_led(state_manual);
 80015de:	4b3e      	ldr	r3, [pc, #248]	@ (80016d8 <fsm_manual+0x280>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 f8f0 	bl	80017c8 <init_Blink_led>
		return;
 80015e8:	e06d      	b.n	80016c6 <fsm_manual+0x26e>
	}
	
	if(is_TIME_Pressed()){
 80015ea:	f7ff fcb3 	bl	8000f54 <is_TIME_Pressed>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d03b      	beq.n	800166c <fsm_manual+0x214>
		switch (state_manual)
 80015f4:	4b38      	ldr	r3, [pc, #224]	@ (80016d8 <fsm_manual+0x280>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b05      	cmp	r3, #5
 80015fa:	d006      	beq.n	800160a <fsm_manual+0x1b2>
 80015fc:	2b05      	cmp	r3, #5
 80015fe:	dc34      	bgt.n	800166a <fsm_manual+0x212>
 8001600:	2b03      	cmp	r3, #3
 8001602:	d012      	beq.n	800162a <fsm_manual+0x1d2>
 8001604:	2b04      	cmp	r3, #4
 8001606:	d020      	beq.n	800164a <fsm_manual+0x1f2>
			break;
		case YELLOW:
			temp_yellow=(temp_yellow+1)%100;
			break;
		default:
			break;
 8001608:	e02f      	b.n	800166a <fsm_manual+0x212>
			temp_red=(temp_red+1)%100;
 800160a:	4b34      	ldr	r3, [pc, #208]	@ (80016dc <fsm_manual+0x284>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	1c5a      	adds	r2, r3, #1
 8001610:	4b38      	ldr	r3, [pc, #224]	@ (80016f4 <fsm_manual+0x29c>)
 8001612:	fb83 1302 	smull	r1, r3, r3, r2
 8001616:	1159      	asrs	r1, r3, #5
 8001618:	17d3      	asrs	r3, r2, #31
 800161a:	1acb      	subs	r3, r1, r3
 800161c:	2164      	movs	r1, #100	@ 0x64
 800161e:	fb01 f303 	mul.w	r3, r1, r3
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	4a2d      	ldr	r2, [pc, #180]	@ (80016dc <fsm_manual+0x284>)
 8001626:	6013      	str	r3, [r2, #0]
			break;
 8001628:	e020      	b.n	800166c <fsm_manual+0x214>
			temp_green=(temp_green+1)%100;
 800162a:	4b30      	ldr	r3, [pc, #192]	@ (80016ec <fsm_manual+0x294>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	1c5a      	adds	r2, r3, #1
 8001630:	4b30      	ldr	r3, [pc, #192]	@ (80016f4 <fsm_manual+0x29c>)
 8001632:	fb83 1302 	smull	r1, r3, r3, r2
 8001636:	1159      	asrs	r1, r3, #5
 8001638:	17d3      	asrs	r3, r2, #31
 800163a:	1acb      	subs	r3, r1, r3
 800163c:	2164      	movs	r1, #100	@ 0x64
 800163e:	fb01 f303 	mul.w	r3, r1, r3
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	4a29      	ldr	r2, [pc, #164]	@ (80016ec <fsm_manual+0x294>)
 8001646:	6013      	str	r3, [r2, #0]
			break;
 8001648:	e010      	b.n	800166c <fsm_manual+0x214>
			temp_yellow=(temp_yellow+1)%100;
 800164a:	4b29      	ldr	r3, [pc, #164]	@ (80016f0 <fsm_manual+0x298>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	1c5a      	adds	r2, r3, #1
 8001650:	4b28      	ldr	r3, [pc, #160]	@ (80016f4 <fsm_manual+0x29c>)
 8001652:	fb83 1302 	smull	r1, r3, r3, r2
 8001656:	1159      	asrs	r1, r3, #5
 8001658:	17d3      	asrs	r3, r2, #31
 800165a:	1acb      	subs	r3, r1, r3
 800165c:	2164      	movs	r1, #100	@ 0x64
 800165e:	fb01 f303 	mul.w	r3, r1, r3
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	4a22      	ldr	r2, [pc, #136]	@ (80016f0 <fsm_manual+0x298>)
 8001666:	6013      	str	r3, [r2, #0]
			break;
 8001668:	e000      	b.n	800166c <fsm_manual+0x214>
			break;
 800166a:	bf00      	nop
		}
	}

	if(actions[ONE_SECOND].timer_flag==1){
 800166c:	4b18      	ldr	r3, [pc, #96]	@ (80016d0 <fsm_manual+0x278>)
 800166e:	695b      	ldr	r3, [r3, #20]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d107      	bne.n	8001684 <fsm_manual+0x22c>
		reset(ONE_SECOND);
 8001674:	2001      	movs	r0, #1
 8001676:	f000 fb15 	bl	8001ca4 <reset>
		Blink_led(state_manual);
 800167a:	4b17      	ldr	r3, [pc, #92]	@ (80016d8 <fsm_manual+0x280>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f000 f8f1 	bl	8001866 <Blink_led>
	} // Blink led

	switch (state_manual)
 8001684:	4b14      	ldr	r3, [pc, #80]	@ (80016d8 <fsm_manual+0x280>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b05      	cmp	r3, #5
 800168a:	d006      	beq.n	800169a <fsm_manual+0x242>
 800168c:	2b05      	cmp	r3, #5
 800168e:	dc19      	bgt.n	80016c4 <fsm_manual+0x26c>
 8001690:	2b03      	cmp	r3, #3
 8001692:	d009      	beq.n	80016a8 <fsm_manual+0x250>
 8001694:	2b04      	cmp	r3, #4
 8001696:	d00e      	beq.n	80016b6 <fsm_manual+0x25e>
		break;
	case YELLOW:
		run_led(3,temp_yellow);
		break;
	default:
		break;
 8001698:	e014      	b.n	80016c4 <fsm_manual+0x26c>
		run_led(1,temp_red);
 800169a:	4b10      	ldr	r3, [pc, #64]	@ (80016dc <fsm_manual+0x284>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4619      	mov	r1, r3
 80016a0:	2001      	movs	r0, #1
 80016a2:	f7ff fbc3 	bl	8000e2c <run_led>
		break;
 80016a6:	e00e      	b.n	80016c6 <fsm_manual+0x26e>
		run_led(2, temp_green);
 80016a8:	4b10      	ldr	r3, [pc, #64]	@ (80016ec <fsm_manual+0x294>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4619      	mov	r1, r3
 80016ae:	2002      	movs	r0, #2
 80016b0:	f7ff fbbc 	bl	8000e2c <run_led>
		break;
 80016b4:	e007      	b.n	80016c6 <fsm_manual+0x26e>
		run_led(3,temp_yellow);
 80016b6:	4b0e      	ldr	r3, [pc, #56]	@ (80016f0 <fsm_manual+0x298>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4619      	mov	r1, r3
 80016bc:	2003      	movs	r0, #3
 80016be:	f7ff fbb5 	bl	8000e2c <run_led>
		break;
 80016c2:	e000      	b.n	80016c6 <fsm_manual+0x26e>
		break;
 80016c4:	bf00      	nop
	}// 7 SEGMENT
}
 80016c6:	bdb0      	pop	{r4, r5, r7, pc}
 80016c8:	33333333 	.word	0x33333333
 80016cc:	3fe33333 	.word	0x3fe33333
 80016d0:	20000124 	.word	0x20000124
 80016d4:	200000d8 	.word	0x200000d8
 80016d8:	200000d4 	.word	0x200000d4
 80016dc:	200000c8 	.word	0x200000c8
 80016e0:	20000020 	.word	0x20000020
 80016e4:	20000024 	.word	0x20000024
 80016e8:	20000028 	.word	0x20000028
 80016ec:	200000cc 	.word	0x200000cc
 80016f0:	200000d0 	.word	0x200000d0
 80016f4:	51eb851f 	.word	0x51eb851f

080016f8 <run>:
int Time_red=5;
int Time_green=3;
int Time_yellow=2;


void run(){
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	switch (pro_mode) {
 80016fc:	4b10      	ldr	r3, [pc, #64]	@ (8001740 <run+0x48>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b02      	cmp	r3, #2
 8001702:	d018      	beq.n	8001736 <run+0x3e>
 8001704:	2b02      	cmp	r3, #2
 8001706:	dc18      	bgt.n	800173a <run+0x42>
 8001708:	2b00      	cmp	r3, #0
 800170a:	d002      	beq.n	8001712 <run+0x1a>
 800170c:	2b01      	cmp	r3, #1
 800170e:	d00f      	beq.n	8001730 <run+0x38>
			fsm_automatic_run();
			break;
		case MANUAL_MODE:
			fsm_manual();
		default:
			break;
 8001710:	e013      	b.n	800173a <run+0x42>
			pro_mode=ACTIVE_MODE;
 8001712:	4b0b      	ldr	r3, [pc, #44]	@ (8001740 <run+0x48>)
 8001714:	2201      	movs	r2, #1
 8001716:	601a      	str	r2, [r3, #0]
			Setup_time(TIME_SEGMENT,LED_SEGMENT_CYCLE/4 );
 8001718:	2132      	movs	r1, #50	@ 0x32
 800171a:	2003      	movs	r0, #3
 800171c:	f000 fa8a 	bl	8001c34 <Setup_time>
			Setup_time(ONE_SECOND, 1000);
 8001720:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001724:	2001      	movs	r0, #1
 8001726:	f000 fa85 	bl	8001c34 <Setup_time>
			init_RED_GREEN();
 800172a:	f7ff fd91 	bl	8001250 <init_RED_GREEN>
			break;
 800172e:	e005      	b.n	800173c <run+0x44>
			fsm_automatic_run();
 8001730:	f7ff fd1a 	bl	8001168 <fsm_automatic_run>
			break;
 8001734:	e002      	b.n	800173c <run+0x44>
			fsm_manual();
 8001736:	f7ff fe8f 	bl	8001458 <fsm_manual>
			break;
 800173a:	bf00      	nop
	}
}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}
 8001740:	200000d8 	.word	0x200000d8

08001744 <turn_on_LED>:
        GREEN_1_Pin,
        GREEN_2_Pin,
        YELLOW_1_Pin,
        YELLOW_2_Pin
};
void turn_on_LED(int Pos){
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, array_LED_pin[Pos], SET);
 800174c:	4a06      	ldr	r2, [pc, #24]	@ (8001768 <turn_on_LED+0x24>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001754:	b29b      	uxth	r3, r3
 8001756:	2202      	movs	r2, #2
 8001758:	4619      	mov	r1, r3
 800175a:	4804      	ldr	r0, [pc, #16]	@ (800176c <turn_on_LED+0x28>)
 800175c:	f000 fe39 	bl	80023d2 <HAL_GPIO_WritePin>
}
 8001760:	bf00      	nop
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	2000002c 	.word	0x2000002c
 800176c:	40010c00 	.word	0x40010c00

08001770 <turn_off_LED>:
void turn_off_LED(int Pos){
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, array_LED_pin[Pos], RESET);
 8001778:	4a06      	ldr	r2, [pc, #24]	@ (8001794 <turn_off_LED+0x24>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001780:	b29b      	uxth	r3, r3
 8001782:	2200      	movs	r2, #0
 8001784:	4619      	mov	r1, r3
 8001786:	4804      	ldr	r0, [pc, #16]	@ (8001798 <turn_off_LED+0x28>)
 8001788:	f000 fe23 	bl	80023d2 <HAL_GPIO_WritePin>
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	2000002c 	.word	0x2000002c
 8001798:	40010c00 	.word	0x40010c00

0800179c <toogle_LED>:
void toogle_LED(int Pos){
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, array_LED_pin[Pos]);
 80017a4:	4a06      	ldr	r2, [pc, #24]	@ (80017c0 <toogle_LED+0x24>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	4619      	mov	r1, r3
 80017b0:	4804      	ldr	r0, [pc, #16]	@ (80017c4 <toogle_LED+0x28>)
 80017b2:	f000 fe26 	bl	8002402 <HAL_GPIO_TogglePin>
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	2000002c 	.word	0x2000002c
 80017c4:	40010c00 	.word	0x40010c00

080017c8 <init_Blink_led>:

void init_Blink_led(int color_of_led){
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
	switch (color_of_led)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b05      	cmp	r3, #5
 80017d4:	d009      	beq.n	80017ea <init_Blink_led+0x22>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b05      	cmp	r3, #5
 80017da:	dc3f      	bgt.n	800185c <init_Blink_led+0x94>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d016      	beq.n	8001810 <init_Blink_led+0x48>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b04      	cmp	r3, #4
 80017e6:	d026      	beq.n	8001836 <init_Blink_led+0x6e>
		turn_off_LED(RED_2);
		turn_off_LED(GREEN_1);
		turn_off_LED(GREEN_2);
		break;
	default:
		break;
 80017e8:	e038      	b.n	800185c <init_Blink_led+0x94>
		turn_on_LED(RED_1);
 80017ea:	2000      	movs	r0, #0
 80017ec:	f7ff ffaa 	bl	8001744 <turn_on_LED>
		turn_on_LED(RED_2); 
 80017f0:	2001      	movs	r0, #1
 80017f2:	f7ff ffa7 	bl	8001744 <turn_on_LED>
		turn_off_LED(GREEN_1);
 80017f6:	2002      	movs	r0, #2
 80017f8:	f7ff ffba 	bl	8001770 <turn_off_LED>
		turn_off_LED(GREEN_2);
 80017fc:	2003      	movs	r0, #3
 80017fe:	f7ff ffb7 	bl	8001770 <turn_off_LED>
		turn_off_LED(YELLOW_1);
 8001802:	2004      	movs	r0, #4
 8001804:	f7ff ffb4 	bl	8001770 <turn_off_LED>
		turn_off_LED(YELLOW_2);
 8001808:	2005      	movs	r0, #5
 800180a:	f7ff ffb1 	bl	8001770 <turn_off_LED>
		break;
 800180e:	e026      	b.n	800185e <init_Blink_led+0x96>
		turn_on_LED(GREEN_1);
 8001810:	2002      	movs	r0, #2
 8001812:	f7ff ff97 	bl	8001744 <turn_on_LED>
		turn_on_LED(GREEN_2);
 8001816:	2003      	movs	r0, #3
 8001818:	f7ff ff94 	bl	8001744 <turn_on_LED>
		turn_off_LED(RED_1);
 800181c:	2000      	movs	r0, #0
 800181e:	f7ff ffa7 	bl	8001770 <turn_off_LED>
		turn_off_LED(RED_2);
 8001822:	2001      	movs	r0, #1
 8001824:	f7ff ffa4 	bl	8001770 <turn_off_LED>
		turn_off_LED(YELLOW_1);
 8001828:	2004      	movs	r0, #4
 800182a:	f7ff ffa1 	bl	8001770 <turn_off_LED>
		turn_off_LED(YELLOW_2);
 800182e:	2005      	movs	r0, #5
 8001830:	f7ff ff9e 	bl	8001770 <turn_off_LED>
		break;
 8001834:	e013      	b.n	800185e <init_Blink_led+0x96>
		turn_on_LED(YELLOW_1);
 8001836:	2004      	movs	r0, #4
 8001838:	f7ff ff84 	bl	8001744 <turn_on_LED>
		turn_on_LED(YELLOW_2);
 800183c:	2005      	movs	r0, #5
 800183e:	f7ff ff81 	bl	8001744 <turn_on_LED>
		turn_off_LED(RED_1);
 8001842:	2000      	movs	r0, #0
 8001844:	f7ff ff94 	bl	8001770 <turn_off_LED>
		turn_off_LED(RED_2);
 8001848:	2001      	movs	r0, #1
 800184a:	f7ff ff91 	bl	8001770 <turn_off_LED>
		turn_off_LED(GREEN_1);
 800184e:	2002      	movs	r0, #2
 8001850:	f7ff ff8e 	bl	8001770 <turn_off_LED>
		turn_off_LED(GREEN_2);
 8001854:	2003      	movs	r0, #3
 8001856:	f7ff ff8b 	bl	8001770 <turn_off_LED>
		break;
 800185a:	e000      	b.n	800185e <init_Blink_led+0x96>
		break;
 800185c:	bf00      	nop
	}
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <Blink_led>:
void Blink_led(int color_of_led){
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
	switch (color_of_led)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b05      	cmp	r3, #5
 8001872:	d009      	beq.n	8001888 <Blink_led+0x22>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b05      	cmp	r3, #5
 8001878:	dc1b      	bgt.n	80018b2 <Blink_led+0x4c>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b03      	cmp	r3, #3
 800187e:	d00a      	beq.n	8001896 <Blink_led+0x30>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b04      	cmp	r3, #4
 8001884:	d00e      	beq.n	80018a4 <Blink_led+0x3e>
	case YELLOW:
		toogle_LED(YELLOW_1);
		toogle_LED(YELLOW_2);
		break;
	default:
		break;
 8001886:	e014      	b.n	80018b2 <Blink_led+0x4c>
		toogle_LED(RED_1);
 8001888:	2000      	movs	r0, #0
 800188a:	f7ff ff87 	bl	800179c <toogle_LED>
		toogle_LED(RED_2);
 800188e:	2001      	movs	r0, #1
 8001890:	f7ff ff84 	bl	800179c <toogle_LED>
		break;
 8001894:	e00e      	b.n	80018b4 <Blink_led+0x4e>
		toogle_LED(GREEN_1);
 8001896:	2002      	movs	r0, #2
 8001898:	f7ff ff80 	bl	800179c <toogle_LED>
		toogle_LED(GREEN_2);
 800189c:	2003      	movs	r0, #3
 800189e:	f7ff ff7d 	bl	800179c <toogle_LED>
		break;
 80018a2:	e007      	b.n	80018b4 <Blink_led+0x4e>
		toogle_LED(YELLOW_1);
 80018a4:	2004      	movs	r0, #4
 80018a6:	f7ff ff79 	bl	800179c <toogle_LED>
		toogle_LED(YELLOW_2);
 80018aa:	2005      	movs	r0, #5
 80018ac:	f7ff ff76 	bl	800179c <toogle_LED>
		break;
 80018b0:	e000      	b.n	80018b4 <Blink_led+0x4e>
		break;
 80018b2:	bf00      	nop
	}
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018c0:	f000 fa84 	bl	8001dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018c4:	f000 f80c 	bl	80018e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018c8:	f000 f892 	bl	80019f0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80018cc:	f000 f844 	bl	8001958 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	  HAL_TIM_Base_Start_IT(&htim2);
 80018d0:	4802      	ldr	r0, [pc, #8]	@ (80018dc <main+0x20>)
 80018d2:	f001 f9dd 	bl	8002c90 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  run();
 80018d6:	f7ff ff0f 	bl	80016f8 <run>
 80018da:	e7fc      	b.n	80018d6 <main+0x1a>
 80018dc:	200000dc 	.word	0x200000dc

080018e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b090      	sub	sp, #64	@ 0x40
 80018e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018e6:	f107 0318 	add.w	r3, r7, #24
 80018ea:	2228      	movs	r2, #40	@ 0x28
 80018ec:	2100      	movs	r1, #0
 80018ee:	4618      	mov	r0, r3
 80018f0:	f001 fd5a 	bl	80033a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	60da      	str	r2, [r3, #12]
 8001900:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001902:	2302      	movs	r3, #2
 8001904:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001906:	2301      	movs	r3, #1
 8001908:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800190a:	2310      	movs	r3, #16
 800190c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800190e:	2300      	movs	r3, #0
 8001910:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001912:	f107 0318 	add.w	r3, r7, #24
 8001916:	4618      	mov	r0, r3
 8001918:	f000 fd8c 	bl	8002434 <HAL_RCC_OscConfig>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001922:	f000 f8ef 	bl	8001b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001926:	230f      	movs	r3, #15
 8001928:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800192a:	2300      	movs	r3, #0
 800192c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	2100      	movs	r1, #0
 800193e:	4618      	mov	r0, r3
 8001940:	f000 fffa 	bl	8002938 <HAL_RCC_ClockConfig>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800194a:	f000 f8db 	bl	8001b04 <Error_Handler>
  }
}
 800194e:	bf00      	nop
 8001950:	3740      	adds	r7, #64	@ 0x40
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800195e:	f107 0308 	add.w	r3, r7, #8
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	609a      	str	r2, [r3, #8]
 800196a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800196c:	463b      	mov	r3, r7
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001974:	4b1d      	ldr	r3, [pc, #116]	@ (80019ec <MX_TIM2_Init+0x94>)
 8001976:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800197a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800197c:	4b1b      	ldr	r3, [pc, #108]	@ (80019ec <MX_TIM2_Init+0x94>)
 800197e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001982:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001984:	4b19      	ldr	r3, [pc, #100]	@ (80019ec <MX_TIM2_Init+0x94>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800198a:	4b18      	ldr	r3, [pc, #96]	@ (80019ec <MX_TIM2_Init+0x94>)
 800198c:	2209      	movs	r2, #9
 800198e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001990:	4b16      	ldr	r3, [pc, #88]	@ (80019ec <MX_TIM2_Init+0x94>)
 8001992:	2200      	movs	r2, #0
 8001994:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001996:	4b15      	ldr	r3, [pc, #84]	@ (80019ec <MX_TIM2_Init+0x94>)
 8001998:	2200      	movs	r2, #0
 800199a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800199c:	4813      	ldr	r0, [pc, #76]	@ (80019ec <MX_TIM2_Init+0x94>)
 800199e:	f001 f927 	bl	8002bf0 <HAL_TIM_Base_Init>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80019a8:	f000 f8ac 	bl	8001b04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019b2:	f107 0308 	add.w	r3, r7, #8
 80019b6:	4619      	mov	r1, r3
 80019b8:	480c      	ldr	r0, [pc, #48]	@ (80019ec <MX_TIM2_Init+0x94>)
 80019ba:	f001 faa5 	bl	8002f08 <HAL_TIM_ConfigClockSource>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80019c4:	f000 f89e 	bl	8001b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c8:	2300      	movs	r3, #0
 80019ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019cc:	2300      	movs	r3, #0
 80019ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019d0:	463b      	mov	r3, r7
 80019d2:	4619      	mov	r1, r3
 80019d4:	4805      	ldr	r0, [pc, #20]	@ (80019ec <MX_TIM2_Init+0x94>)
 80019d6:	f001 fc7d 	bl	80032d4 <HAL_TIMEx_MasterConfigSynchronization>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80019e0:	f000 f890 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019e4:	bf00      	nop
 80019e6:	3718      	adds	r7, #24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	200000dc 	.word	0x200000dc

080019f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b088      	sub	sp, #32
 80019f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f6:	f107 0310 	add.w	r3, r7, #16
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	609a      	str	r2, [r3, #8]
 8001a02:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a04:	4b35      	ldr	r3, [pc, #212]	@ (8001adc <MX_GPIO_Init+0xec>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	4a34      	ldr	r2, [pc, #208]	@ (8001adc <MX_GPIO_Init+0xec>)
 8001a0a:	f043 0310 	orr.w	r3, r3, #16
 8001a0e:	6193      	str	r3, [r2, #24]
 8001a10:	4b32      	ldr	r3, [pc, #200]	@ (8001adc <MX_GPIO_Init+0xec>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	f003 0310 	and.w	r3, r3, #16
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1c:	4b2f      	ldr	r3, [pc, #188]	@ (8001adc <MX_GPIO_Init+0xec>)
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	4a2e      	ldr	r2, [pc, #184]	@ (8001adc <MX_GPIO_Init+0xec>)
 8001a22:	f043 0304 	orr.w	r3, r3, #4
 8001a26:	6193      	str	r3, [r2, #24]
 8001a28:	4b2c      	ldr	r3, [pc, #176]	@ (8001adc <MX_GPIO_Init+0xec>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	f003 0304 	and.w	r3, r3, #4
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a34:	4b29      	ldr	r3, [pc, #164]	@ (8001adc <MX_GPIO_Init+0xec>)
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	4a28      	ldr	r2, [pc, #160]	@ (8001adc <MX_GPIO_Init+0xec>)
 8001a3a:	f043 0308 	orr.w	r3, r3, #8
 8001a3e:	6193      	str	r3, [r2, #24]
 8001a40:	4b26      	ldr	r3, [pc, #152]	@ (8001adc <MX_GPIO_Init+0xec>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|SEG_0_Pin|SEG_1_Pin|SEG_2_Pin
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f64f 6120 	movw	r1, #65056	@ 0xfe20
 8001a52:	4823      	ldr	r0, [pc, #140]	@ (8001ae0 <MX_GPIO_Init+0xf0>)
 8001a54:	f000 fcbd 	bl	80023d2 <HAL_GPIO_WritePin>
                          |SEG_3_Pin|SEG_4_Pin|SEG_5_Pin|SEG_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_2_Pin|GREEN_2_Pin|YELLOW_2_Pin|EN0_Pin
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f641 71f8 	movw	r1, #8184	@ 0x1ff8
 8001a5e:	4821      	ldr	r0, [pc, #132]	@ (8001ae4 <MX_GPIO_Init+0xf4>)
 8001a60:	f000 fcb7 	bl	80023d2 <HAL_GPIO_WritePin>
                          |EN1_Pin|EN2_Pin|EN3_Pin|RED_1_Pin
                          |GREEN_1_Pin|YELLOW_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Button1_Pin */
  GPIO_InitStruct.Pin = Button1_Pin;
 8001a64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 8001a72:	f107 0310 	add.w	r3, r7, #16
 8001a76:	4619      	mov	r1, r3
 8001a78:	481b      	ldr	r0, [pc, #108]	@ (8001ae8 <MX_GPIO_Init+0xf8>)
 8001a7a:	f000 fb17 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin SEG_0_Pin SEG_1_Pin SEG_2_Pin
                           SEG_3_Pin SEG_4_Pin SEG_5_Pin SEG_6_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|SEG_0_Pin|SEG_1_Pin|SEG_2_Pin
 8001a7e:	f64f 6320 	movw	r3, #65056	@ 0xfe20
 8001a82:	613b      	str	r3, [r7, #16]
                          |SEG_3_Pin|SEG_4_Pin|SEG_5_Pin|SEG_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a84:	2301      	movs	r3, #1
 8001a86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a90:	f107 0310 	add.w	r3, r7, #16
 8001a94:	4619      	mov	r1, r3
 8001a96:	4812      	ldr	r0, [pc, #72]	@ (8001ae0 <MX_GPIO_Init+0xf0>)
 8001a98:	f000 fb08 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_Pin TIME_Pin SET_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|TIME_Pin|SET_Pin;
 8001a9c:	2307      	movs	r3, #7
 8001a9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa8:	f107 0310 	add.w	r3, r7, #16
 8001aac:	4619      	mov	r1, r3
 8001aae:	480d      	ldr	r0, [pc, #52]	@ (8001ae4 <MX_GPIO_Init+0xf4>)
 8001ab0:	f000 fafc 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_2_Pin GREEN_2_Pin YELLOW_2_Pin EN0_Pin
                           EN1_Pin EN2_Pin EN3_Pin RED_1_Pin
                           GREEN_1_Pin YELLOW_1_Pin */
  GPIO_InitStruct.Pin = RED_2_Pin|GREEN_2_Pin|YELLOW_2_Pin|EN0_Pin
 8001ab4:	f641 73f8 	movw	r3, #8184	@ 0x1ff8
 8001ab8:	613b      	str	r3, [r7, #16]
                          |EN1_Pin|EN2_Pin|EN3_Pin|RED_1_Pin
                          |GREEN_1_Pin|YELLOW_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aba:	2301      	movs	r3, #1
 8001abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac6:	f107 0310 	add.w	r3, r7, #16
 8001aca:	4619      	mov	r1, r3
 8001acc:	4805      	ldr	r0, [pc, #20]	@ (8001ae4 <MX_GPIO_Init+0xf4>)
 8001ace:	f000 faed 	bl	80020ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ad2:	bf00      	nop
 8001ad4:	3720      	adds	r7, #32
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40010800 	.word	0x40010800
 8001ae4:	40010c00 	.word	0x40010c00
 8001ae8:	40011000 	.word	0x40011000

08001aec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
	getKeyInput();
 8001af4:	f7ff fa3e 	bl	8000f74 <getKeyInput>
	timer_run();
 8001af8:	f000 f8fa 	bl	8001cf0 <timer_run>
}
 8001afc:	bf00      	nop
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b08:	b672      	cpsid	i
}
 8001b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b0c:	bf00      	nop
 8001b0e:	e7fd      	b.n	8001b0c <Error_Handler+0x8>

08001b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b16:	4b15      	ldr	r3, [pc, #84]	@ (8001b6c <HAL_MspInit+0x5c>)
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	4a14      	ldr	r2, [pc, #80]	@ (8001b6c <HAL_MspInit+0x5c>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	6193      	str	r3, [r2, #24]
 8001b22:	4b12      	ldr	r3, [pc, #72]	@ (8001b6c <HAL_MspInit+0x5c>)
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b6c <HAL_MspInit+0x5c>)
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	4a0e      	ldr	r2, [pc, #56]	@ (8001b6c <HAL_MspInit+0x5c>)
 8001b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b38:	61d3      	str	r3, [r2, #28]
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b6c <HAL_MspInit+0x5c>)
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b42:	607b      	str	r3, [r7, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001b46:	4b0a      	ldr	r3, [pc, #40]	@ (8001b70 <HAL_MspInit+0x60>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	4a04      	ldr	r2, [pc, #16]	@ (8001b70 <HAL_MspInit+0x60>)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b62:	bf00      	nop
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	40010000 	.word	0x40010000

08001b74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b84:	d113      	bne.n	8001bae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b86:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb8 <HAL_TIM_Base_MspInit+0x44>)
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	4a0b      	ldr	r2, [pc, #44]	@ (8001bb8 <HAL_TIM_Base_MspInit+0x44>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	61d3      	str	r3, [r2, #28]
 8001b92:	4b09      	ldr	r3, [pc, #36]	@ (8001bb8 <HAL_TIM_Base_MspInit+0x44>)
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	201c      	movs	r0, #28
 8001ba4:	f000 fa4b 	bl	800203e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ba8:	201c      	movs	r0, #28
 8001baa:	f000 fa64 	bl	8002076 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001bae:	bf00      	nop
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40021000 	.word	0x40021000

08001bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bc0:	bf00      	nop
 8001bc2:	e7fd      	b.n	8001bc0 <NMI_Handler+0x4>

08001bc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bc8:	bf00      	nop
 8001bca:	e7fd      	b.n	8001bc8 <HardFault_Handler+0x4>

08001bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd0:	bf00      	nop
 8001bd2:	e7fd      	b.n	8001bd0 <MemManage_Handler+0x4>

08001bd4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bd8:	bf00      	nop
 8001bda:	e7fd      	b.n	8001bd8 <BusFault_Handler+0x4>

08001bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be0:	bf00      	nop
 8001be2:	e7fd      	b.n	8001be0 <UsageFault_Handler+0x4>

08001be4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr

08001bf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr

08001bfc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr

08001c08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c0c:	f000 f924 	bl	8001e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c18:	4802      	ldr	r0, [pc, #8]	@ (8001c24 <TIM2_IRQHandler+0x10>)
 8001c1a:	f001 f885 	bl	8002d28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	200000dc 	.word	0x200000dc

08001c28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr

08001c34 <Setup_time>:
 */

#include<timer.h>

detail_time actions[NUMBER_OF_ACTIONS];
void Setup_time(int index, int duration){
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
		actions[index].time= duration / TIMER_CYCLE;
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	4a16      	ldr	r2, [pc, #88]	@ (8001c9c <Setup_time+0x68>)
 8001c42:	fb82 1203 	smull	r1, r2, r2, r3
 8001c46:	1092      	asrs	r2, r2, #2
 8001c48:	17db      	asrs	r3, r3, #31
 8001c4a:	1ad1      	subs	r1, r2, r3
 8001c4c:	4814      	ldr	r0, [pc, #80]	@ (8001ca0 <Setup_time+0x6c>)
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	4613      	mov	r3, r2
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	4413      	add	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4403      	add	r3, r0
 8001c5a:	6019      	str	r1, [r3, #0]
		actions[index].timer_counter=duration/TIMER_CYCLE;
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	4a0f      	ldr	r2, [pc, #60]	@ (8001c9c <Setup_time+0x68>)
 8001c60:	fb82 1203 	smull	r1, r2, r2, r3
 8001c64:	1092      	asrs	r2, r2, #2
 8001c66:	17db      	asrs	r3, r3, #31
 8001c68:	1ad1      	subs	r1, r2, r3
 8001c6a:	480d      	ldr	r0, [pc, #52]	@ (8001ca0 <Setup_time+0x6c>)
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	4413      	add	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4403      	add	r3, r0
 8001c78:	3304      	adds	r3, #4
 8001c7a:	6019      	str	r1, [r3, #0]
		actions[index].timer_flag= 0;
 8001c7c:	4908      	ldr	r1, [pc, #32]	@ (8001ca0 <Setup_time+0x6c>)
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	4413      	add	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	440b      	add	r3, r1
 8001c8a:	3308      	adds	r3, #8
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	66666667 	.word	0x66666667
 8001ca0:	20000124 	.word	0x20000124

08001ca4 <reset>:


void reset(int index){
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
		actions[index].timer_counter= actions[index].time;
 8001cac:	490f      	ldr	r1, [pc, #60]	@ (8001cec <reset+0x48>)
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	4413      	add	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	440b      	add	r3, r1
 8001cba:	6819      	ldr	r1, [r3, #0]
 8001cbc:	480b      	ldr	r0, [pc, #44]	@ (8001cec <reset+0x48>)
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	4413      	add	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4403      	add	r3, r0
 8001cca:	3304      	adds	r3, #4
 8001ccc:	6019      	str	r1, [r3, #0]
		actions[index].timer_flag= 0;
 8001cce:	4907      	ldr	r1, [pc, #28]	@ (8001cec <reset+0x48>)
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	4413      	add	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	440b      	add	r3, r1
 8001cdc:	3308      	adds	r3, #8
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr
 8001cec:	20000124 	.word	0x20000124

08001cf0 <timer_run>:


void timer_run(){
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
		for (int i=0 ; i< NUMBER_OF_ACTIONS; i++){
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	607b      	str	r3, [r7, #4]
 8001cfa:	e035      	b.n	8001d68 <timer_run+0x78>
			if(actions[i].timer_counter >0 ){
 8001cfc:	491f      	ldr	r1, [pc, #124]	@ (8001d7c <timer_run+0x8c>)
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	4613      	mov	r3, r2
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	4413      	add	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	440b      	add	r3, r1
 8001d0a:	3304      	adds	r3, #4
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	dd27      	ble.n	8001d62 <timer_run+0x72>
				actions[i].timer_counter--;
 8001d12:	491a      	ldr	r1, [pc, #104]	@ (8001d7c <timer_run+0x8c>)
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	4613      	mov	r3, r2
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	4413      	add	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	440b      	add	r3, r1
 8001d20:	3304      	adds	r3, #4
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	1e59      	subs	r1, r3, #1
 8001d26:	4815      	ldr	r0, [pc, #84]	@ (8001d7c <timer_run+0x8c>)
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	4413      	add	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4403      	add	r3, r0
 8001d34:	3304      	adds	r3, #4
 8001d36:	6019      	str	r1, [r3, #0]
				if(actions[i].timer_counter<=0){
 8001d38:	4910      	ldr	r1, [pc, #64]	@ (8001d7c <timer_run+0x8c>)
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	4413      	add	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	440b      	add	r3, r1
 8001d46:	3304      	adds	r3, #4
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	dc09      	bgt.n	8001d62 <timer_run+0x72>
					actions[i].timer_flag=1;
 8001d4e:	490b      	ldr	r1, [pc, #44]	@ (8001d7c <timer_run+0x8c>)
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	4613      	mov	r3, r2
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	4413      	add	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	3308      	adds	r3, #8
 8001d5e:	2201      	movs	r2, #1
 8001d60:	601a      	str	r2, [r3, #0]
		for (int i=0 ; i< NUMBER_OF_ACTIONS; i++){
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	3301      	adds	r3, #1
 8001d66:	607b      	str	r3, [r7, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b09      	cmp	r3, #9
 8001d6c:	ddc6      	ble.n	8001cfc <timer_run+0xc>
				}
			}

		}
}
 8001d6e:	bf00      	nop
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	20000124 	.word	0x20000124

08001d80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d80:	f7ff ff52 	bl	8001c28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d84:	480b      	ldr	r0, [pc, #44]	@ (8001db4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d86:	490c      	ldr	r1, [pc, #48]	@ (8001db8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d88:	4a0c      	ldr	r2, [pc, #48]	@ (8001dbc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d8c:	e002      	b.n	8001d94 <LoopCopyDataInit>

08001d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d92:	3304      	adds	r3, #4

08001d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d98:	d3f9      	bcc.n	8001d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d9a:	4a09      	ldr	r2, [pc, #36]	@ (8001dc0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d9c:	4c09      	ldr	r4, [pc, #36]	@ (8001dc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001da0:	e001      	b.n	8001da6 <LoopFillZerobss>

08001da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001da4:	3204      	adds	r2, #4

08001da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da8:	d3fb      	bcc.n	8001da2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001daa:	f001 fb05 	bl	80033b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dae:	f7ff fd85 	bl	80018bc <main>
  bx lr
 8001db2:	4770      	bx	lr
  ldr r0, =_sdata
 8001db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001db8:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 8001dbc:	0800353c 	.word	0x0800353c
  ldr r2, =_sbss
 8001dc0:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 8001dc4:	200001a0 	.word	0x200001a0

08001dc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dc8:	e7fe      	b.n	8001dc8 <ADC1_2_IRQHandler>
	...

08001dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dd0:	4b08      	ldr	r3, [pc, #32]	@ (8001df4 <HAL_Init+0x28>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a07      	ldr	r2, [pc, #28]	@ (8001df4 <HAL_Init+0x28>)
 8001dd6:	f043 0310 	orr.w	r3, r3, #16
 8001dda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ddc:	2003      	movs	r0, #3
 8001dde:	f000 f923 	bl	8002028 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001de2:	200f      	movs	r0, #15
 8001de4:	f000 f808 	bl	8001df8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001de8:	f7ff fe92 	bl	8001b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40022000 	.word	0x40022000

08001df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e00:	4b12      	ldr	r3, [pc, #72]	@ (8001e4c <HAL_InitTick+0x54>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4b12      	ldr	r3, [pc, #72]	@ (8001e50 <HAL_InitTick+0x58>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e16:	4618      	mov	r0, r3
 8001e18:	f000 f93b 	bl	8002092 <HAL_SYSTICK_Config>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e00e      	b.n	8001e44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b0f      	cmp	r3, #15
 8001e2a:	d80a      	bhi.n	8001e42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	f04f 30ff 	mov.w	r0, #4294967295
 8001e34:	f000 f903 	bl	800203e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e38:	4a06      	ldr	r2, [pc, #24]	@ (8001e54 <HAL_InitTick+0x5c>)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	e000      	b.n	8001e44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20000038 	.word	0x20000038
 8001e50:	20000040 	.word	0x20000040
 8001e54:	2000003c 	.word	0x2000003c

08001e58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e5c:	4b05      	ldr	r3, [pc, #20]	@ (8001e74 <HAL_IncTick+0x1c>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	461a      	mov	r2, r3
 8001e62:	4b05      	ldr	r3, [pc, #20]	@ (8001e78 <HAL_IncTick+0x20>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4413      	add	r3, r2
 8001e68:	4a03      	ldr	r2, [pc, #12]	@ (8001e78 <HAL_IncTick+0x20>)
 8001e6a:	6013      	str	r3, [r2, #0]
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr
 8001e74:	20000040 	.word	0x20000040
 8001e78:	2000019c 	.word	0x2000019c

08001e7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e80:	4b02      	ldr	r3, [pc, #8]	@ (8001e8c <HAL_GetTick+0x10>)
 8001e82:	681b      	ldr	r3, [r3, #0]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr
 8001e8c:	2000019c 	.word	0x2000019c

08001e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001eac:	4013      	ands	r3, r2
 8001eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ebc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ec2:	4a04      	ldr	r2, [pc, #16]	@ (8001ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	60d3      	str	r3, [r2, #12]
}
 8001ec8:	bf00      	nop
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001edc:	4b04      	ldr	r3, [pc, #16]	@ (8001ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	0a1b      	lsrs	r3, r3, #8
 8001ee2:	f003 0307 	and.w	r3, r3, #7
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	db0b      	blt.n	8001f1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f06:	79fb      	ldrb	r3, [r7, #7]
 8001f08:	f003 021f 	and.w	r2, r3, #31
 8001f0c:	4906      	ldr	r1, [pc, #24]	@ (8001f28 <__NVIC_EnableIRQ+0x34>)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	095b      	lsrs	r3, r3, #5
 8001f14:	2001      	movs	r0, #1
 8001f16:	fa00 f202 	lsl.w	r2, r0, r2
 8001f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr
 8001f28:	e000e100 	.word	0xe000e100

08001f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	6039      	str	r1, [r7, #0]
 8001f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	db0a      	blt.n	8001f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	490c      	ldr	r1, [pc, #48]	@ (8001f78 <__NVIC_SetPriority+0x4c>)
 8001f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4a:	0112      	lsls	r2, r2, #4
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	440b      	add	r3, r1
 8001f50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f54:	e00a      	b.n	8001f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	4908      	ldr	r1, [pc, #32]	@ (8001f7c <__NVIC_SetPriority+0x50>)
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	3b04      	subs	r3, #4
 8001f64:	0112      	lsls	r2, r2, #4
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	440b      	add	r3, r1
 8001f6a:	761a      	strb	r2, [r3, #24]
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	e000e100 	.word	0xe000e100
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b089      	sub	sp, #36	@ 0x24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f1c3 0307 	rsb	r3, r3, #7
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	bf28      	it	cs
 8001f9e:	2304      	movcs	r3, #4
 8001fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	2b06      	cmp	r3, #6
 8001fa8:	d902      	bls.n	8001fb0 <NVIC_EncodePriority+0x30>
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3b03      	subs	r3, #3
 8001fae:	e000      	b.n	8001fb2 <NVIC_EncodePriority+0x32>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43da      	mvns	r2, r3
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd2:	43d9      	mvns	r1, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd8:	4313      	orrs	r3, r2
         );
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3724      	adds	r7, #36	@ 0x24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr

08001fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ff4:	d301      	bcc.n	8001ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e00f      	b.n	800201a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8002024 <SysTick_Config+0x40>)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002002:	210f      	movs	r1, #15
 8002004:	f04f 30ff 	mov.w	r0, #4294967295
 8002008:	f7ff ff90 	bl	8001f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800200c:	4b05      	ldr	r3, [pc, #20]	@ (8002024 <SysTick_Config+0x40>)
 800200e:	2200      	movs	r2, #0
 8002010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002012:	4b04      	ldr	r3, [pc, #16]	@ (8002024 <SysTick_Config+0x40>)
 8002014:	2207      	movs	r2, #7
 8002016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	e000e010 	.word	0xe000e010

08002028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7ff ff2d 	bl	8001e90 <__NVIC_SetPriorityGrouping>
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800203e:	b580      	push	{r7, lr}
 8002040:	b086      	sub	sp, #24
 8002042:	af00      	add	r7, sp, #0
 8002044:	4603      	mov	r3, r0
 8002046:	60b9      	str	r1, [r7, #8]
 8002048:	607a      	str	r2, [r7, #4]
 800204a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002050:	f7ff ff42 	bl	8001ed8 <__NVIC_GetPriorityGrouping>
 8002054:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	68b9      	ldr	r1, [r7, #8]
 800205a:	6978      	ldr	r0, [r7, #20]
 800205c:	f7ff ff90 	bl	8001f80 <NVIC_EncodePriority>
 8002060:	4602      	mov	r2, r0
 8002062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002066:	4611      	mov	r1, r2
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ff5f 	bl	8001f2c <__NVIC_SetPriority>
}
 800206e:	bf00      	nop
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	4603      	mov	r3, r0
 800207e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff ff35 	bl	8001ef4 <__NVIC_EnableIRQ>
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7ff ffa2 	bl	8001fe4 <SysTick_Config>
 80020a0:	4603      	mov	r3, r0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b08b      	sub	sp, #44	@ 0x2c
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020b6:	2300      	movs	r3, #0
 80020b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020ba:	2300      	movs	r3, #0
 80020bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020be:	e161      	b.n	8002384 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020c0:	2201      	movs	r2, #1
 80020c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	69fa      	ldr	r2, [r7, #28]
 80020d0:	4013      	ands	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	429a      	cmp	r2, r3
 80020da:	f040 8150 	bne.w	800237e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	4a97      	ldr	r2, [pc, #604]	@ (8002340 <HAL_GPIO_Init+0x294>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d05e      	beq.n	80021a6 <HAL_GPIO_Init+0xfa>
 80020e8:	4a95      	ldr	r2, [pc, #596]	@ (8002340 <HAL_GPIO_Init+0x294>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d875      	bhi.n	80021da <HAL_GPIO_Init+0x12e>
 80020ee:	4a95      	ldr	r2, [pc, #596]	@ (8002344 <HAL_GPIO_Init+0x298>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d058      	beq.n	80021a6 <HAL_GPIO_Init+0xfa>
 80020f4:	4a93      	ldr	r2, [pc, #588]	@ (8002344 <HAL_GPIO_Init+0x298>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d86f      	bhi.n	80021da <HAL_GPIO_Init+0x12e>
 80020fa:	4a93      	ldr	r2, [pc, #588]	@ (8002348 <HAL_GPIO_Init+0x29c>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d052      	beq.n	80021a6 <HAL_GPIO_Init+0xfa>
 8002100:	4a91      	ldr	r2, [pc, #580]	@ (8002348 <HAL_GPIO_Init+0x29c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d869      	bhi.n	80021da <HAL_GPIO_Init+0x12e>
 8002106:	4a91      	ldr	r2, [pc, #580]	@ (800234c <HAL_GPIO_Init+0x2a0>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d04c      	beq.n	80021a6 <HAL_GPIO_Init+0xfa>
 800210c:	4a8f      	ldr	r2, [pc, #572]	@ (800234c <HAL_GPIO_Init+0x2a0>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d863      	bhi.n	80021da <HAL_GPIO_Init+0x12e>
 8002112:	4a8f      	ldr	r2, [pc, #572]	@ (8002350 <HAL_GPIO_Init+0x2a4>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d046      	beq.n	80021a6 <HAL_GPIO_Init+0xfa>
 8002118:	4a8d      	ldr	r2, [pc, #564]	@ (8002350 <HAL_GPIO_Init+0x2a4>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d85d      	bhi.n	80021da <HAL_GPIO_Init+0x12e>
 800211e:	2b12      	cmp	r3, #18
 8002120:	d82a      	bhi.n	8002178 <HAL_GPIO_Init+0xcc>
 8002122:	2b12      	cmp	r3, #18
 8002124:	d859      	bhi.n	80021da <HAL_GPIO_Init+0x12e>
 8002126:	a201      	add	r2, pc, #4	@ (adr r2, 800212c <HAL_GPIO_Init+0x80>)
 8002128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800212c:	080021a7 	.word	0x080021a7
 8002130:	08002181 	.word	0x08002181
 8002134:	08002193 	.word	0x08002193
 8002138:	080021d5 	.word	0x080021d5
 800213c:	080021db 	.word	0x080021db
 8002140:	080021db 	.word	0x080021db
 8002144:	080021db 	.word	0x080021db
 8002148:	080021db 	.word	0x080021db
 800214c:	080021db 	.word	0x080021db
 8002150:	080021db 	.word	0x080021db
 8002154:	080021db 	.word	0x080021db
 8002158:	080021db 	.word	0x080021db
 800215c:	080021db 	.word	0x080021db
 8002160:	080021db 	.word	0x080021db
 8002164:	080021db 	.word	0x080021db
 8002168:	080021db 	.word	0x080021db
 800216c:	080021db 	.word	0x080021db
 8002170:	08002189 	.word	0x08002189
 8002174:	0800219d 	.word	0x0800219d
 8002178:	4a76      	ldr	r2, [pc, #472]	@ (8002354 <HAL_GPIO_Init+0x2a8>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d013      	beq.n	80021a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800217e:	e02c      	b.n	80021da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	623b      	str	r3, [r7, #32]
          break;
 8002186:	e029      	b.n	80021dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	3304      	adds	r3, #4
 800218e:	623b      	str	r3, [r7, #32]
          break;
 8002190:	e024      	b.n	80021dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	3308      	adds	r3, #8
 8002198:	623b      	str	r3, [r7, #32]
          break;
 800219a:	e01f      	b.n	80021dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	330c      	adds	r3, #12
 80021a2:	623b      	str	r3, [r7, #32]
          break;
 80021a4:	e01a      	b.n	80021dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d102      	bne.n	80021b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021ae:	2304      	movs	r3, #4
 80021b0:	623b      	str	r3, [r7, #32]
          break;
 80021b2:	e013      	b.n	80021dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d105      	bne.n	80021c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021bc:	2308      	movs	r3, #8
 80021be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	69fa      	ldr	r2, [r7, #28]
 80021c4:	611a      	str	r2, [r3, #16]
          break;
 80021c6:	e009      	b.n	80021dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021c8:	2308      	movs	r3, #8
 80021ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69fa      	ldr	r2, [r7, #28]
 80021d0:	615a      	str	r2, [r3, #20]
          break;
 80021d2:	e003      	b.n	80021dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021d4:	2300      	movs	r3, #0
 80021d6:	623b      	str	r3, [r7, #32]
          break;
 80021d8:	e000      	b.n	80021dc <HAL_GPIO_Init+0x130>
          break;
 80021da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	2bff      	cmp	r3, #255	@ 0xff
 80021e0:	d801      	bhi.n	80021e6 <HAL_GPIO_Init+0x13a>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	e001      	b.n	80021ea <HAL_GPIO_Init+0x13e>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3304      	adds	r3, #4
 80021ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	2bff      	cmp	r3, #255	@ 0xff
 80021f0:	d802      	bhi.n	80021f8 <HAL_GPIO_Init+0x14c>
 80021f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	e002      	b.n	80021fe <HAL_GPIO_Init+0x152>
 80021f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fa:	3b08      	subs	r3, #8
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	210f      	movs	r1, #15
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	fa01 f303 	lsl.w	r3, r1, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	401a      	ands	r2, r3
 8002210:	6a39      	ldr	r1, [r7, #32]
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	fa01 f303 	lsl.w	r3, r1, r3
 8002218:	431a      	orrs	r2, r3
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 80a9 	beq.w	800237e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800222c:	4b4a      	ldr	r3, [pc, #296]	@ (8002358 <HAL_GPIO_Init+0x2ac>)
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	4a49      	ldr	r2, [pc, #292]	@ (8002358 <HAL_GPIO_Init+0x2ac>)
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	6193      	str	r3, [r2, #24]
 8002238:	4b47      	ldr	r3, [pc, #284]	@ (8002358 <HAL_GPIO_Init+0x2ac>)
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	60bb      	str	r3, [r7, #8]
 8002242:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002244:	4a45      	ldr	r2, [pc, #276]	@ (800235c <HAL_GPIO_Init+0x2b0>)
 8002246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002248:	089b      	lsrs	r3, r3, #2
 800224a:	3302      	adds	r3, #2
 800224c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002250:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002254:	f003 0303 	and.w	r3, r3, #3
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	220f      	movs	r2, #15
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	4013      	ands	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a3d      	ldr	r2, [pc, #244]	@ (8002360 <HAL_GPIO_Init+0x2b4>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d00d      	beq.n	800228c <HAL_GPIO_Init+0x1e0>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a3c      	ldr	r2, [pc, #240]	@ (8002364 <HAL_GPIO_Init+0x2b8>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d007      	beq.n	8002288 <HAL_GPIO_Init+0x1dc>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a3b      	ldr	r2, [pc, #236]	@ (8002368 <HAL_GPIO_Init+0x2bc>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d101      	bne.n	8002284 <HAL_GPIO_Init+0x1d8>
 8002280:	2302      	movs	r3, #2
 8002282:	e004      	b.n	800228e <HAL_GPIO_Init+0x1e2>
 8002284:	2303      	movs	r3, #3
 8002286:	e002      	b.n	800228e <HAL_GPIO_Init+0x1e2>
 8002288:	2301      	movs	r3, #1
 800228a:	e000      	b.n	800228e <HAL_GPIO_Init+0x1e2>
 800228c:	2300      	movs	r3, #0
 800228e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002290:	f002 0203 	and.w	r2, r2, #3
 8002294:	0092      	lsls	r2, r2, #2
 8002296:	4093      	lsls	r3, r2
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	4313      	orrs	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800229e:	492f      	ldr	r1, [pc, #188]	@ (800235c <HAL_GPIO_Init+0x2b0>)
 80022a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a2:	089b      	lsrs	r3, r3, #2
 80022a4:	3302      	adds	r3, #2
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d006      	beq.n	80022c6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022b8:	4b2c      	ldr	r3, [pc, #176]	@ (800236c <HAL_GPIO_Init+0x2c0>)
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	492b      	ldr	r1, [pc, #172]	@ (800236c <HAL_GPIO_Init+0x2c0>)
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	608b      	str	r3, [r1, #8]
 80022c4:	e006      	b.n	80022d4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022c6:	4b29      	ldr	r3, [pc, #164]	@ (800236c <HAL_GPIO_Init+0x2c0>)
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	4927      	ldr	r1, [pc, #156]	@ (800236c <HAL_GPIO_Init+0x2c0>)
 80022d0:	4013      	ands	r3, r2
 80022d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d006      	beq.n	80022ee <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022e0:	4b22      	ldr	r3, [pc, #136]	@ (800236c <HAL_GPIO_Init+0x2c0>)
 80022e2:	68da      	ldr	r2, [r3, #12]
 80022e4:	4921      	ldr	r1, [pc, #132]	@ (800236c <HAL_GPIO_Init+0x2c0>)
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	60cb      	str	r3, [r1, #12]
 80022ec:	e006      	b.n	80022fc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022ee:	4b1f      	ldr	r3, [pc, #124]	@ (800236c <HAL_GPIO_Init+0x2c0>)
 80022f0:	68da      	ldr	r2, [r3, #12]
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	43db      	mvns	r3, r3
 80022f6:	491d      	ldr	r1, [pc, #116]	@ (800236c <HAL_GPIO_Init+0x2c0>)
 80022f8:	4013      	ands	r3, r2
 80022fa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d006      	beq.n	8002316 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002308:	4b18      	ldr	r3, [pc, #96]	@ (800236c <HAL_GPIO_Init+0x2c0>)
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	4917      	ldr	r1, [pc, #92]	@ (800236c <HAL_GPIO_Init+0x2c0>)
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	4313      	orrs	r3, r2
 8002312:	604b      	str	r3, [r1, #4]
 8002314:	e006      	b.n	8002324 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002316:	4b15      	ldr	r3, [pc, #84]	@ (800236c <HAL_GPIO_Init+0x2c0>)
 8002318:	685a      	ldr	r2, [r3, #4]
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	43db      	mvns	r3, r3
 800231e:	4913      	ldr	r1, [pc, #76]	@ (800236c <HAL_GPIO_Init+0x2c0>)
 8002320:	4013      	ands	r3, r2
 8002322:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d01f      	beq.n	8002370 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002330:	4b0e      	ldr	r3, [pc, #56]	@ (800236c <HAL_GPIO_Init+0x2c0>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	490d      	ldr	r1, [pc, #52]	@ (800236c <HAL_GPIO_Init+0x2c0>)
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	4313      	orrs	r3, r2
 800233a:	600b      	str	r3, [r1, #0]
 800233c:	e01f      	b.n	800237e <HAL_GPIO_Init+0x2d2>
 800233e:	bf00      	nop
 8002340:	10320000 	.word	0x10320000
 8002344:	10310000 	.word	0x10310000
 8002348:	10220000 	.word	0x10220000
 800234c:	10210000 	.word	0x10210000
 8002350:	10120000 	.word	0x10120000
 8002354:	10110000 	.word	0x10110000
 8002358:	40021000 	.word	0x40021000
 800235c:	40010000 	.word	0x40010000
 8002360:	40010800 	.word	0x40010800
 8002364:	40010c00 	.word	0x40010c00
 8002368:	40011000 	.word	0x40011000
 800236c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002370:	4b0b      	ldr	r3, [pc, #44]	@ (80023a0 <HAL_GPIO_Init+0x2f4>)
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	43db      	mvns	r3, r3
 8002378:	4909      	ldr	r1, [pc, #36]	@ (80023a0 <HAL_GPIO_Init+0x2f4>)
 800237a:	4013      	ands	r3, r2
 800237c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800237e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002380:	3301      	adds	r3, #1
 8002382:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238a:	fa22 f303 	lsr.w	r3, r2, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	f47f ae96 	bne.w	80020c0 <HAL_GPIO_Init+0x14>
  }
}
 8002394:	bf00      	nop
 8002396:	bf00      	nop
 8002398:	372c      	adds	r7, #44	@ 0x2c
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr
 80023a0:	40010400 	.word	0x40010400

080023a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	460b      	mov	r3, r1
 80023ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	887b      	ldrh	r3, [r7, #2]
 80023b6:	4013      	ands	r3, r2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d002      	beq.n	80023c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023bc:	2301      	movs	r3, #1
 80023be:	73fb      	strb	r3, [r7, #15]
 80023c0:	e001      	b.n	80023c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023c2:	2300      	movs	r3, #0
 80023c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr

080023d2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
 80023da:	460b      	mov	r3, r1
 80023dc:	807b      	strh	r3, [r7, #2]
 80023de:	4613      	mov	r3, r2
 80023e0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023e2:	787b      	ldrb	r3, [r7, #1]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023e8:	887a      	ldrh	r2, [r7, #2]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023ee:	e003      	b.n	80023f8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023f0:	887b      	ldrh	r3, [r7, #2]
 80023f2:	041a      	lsls	r2, r3, #16
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	611a      	str	r2, [r3, #16]
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc80      	pop	{r7}
 8002400:	4770      	bx	lr

08002402 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002402:	b480      	push	{r7}
 8002404:	b085      	sub	sp, #20
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
 800240a:	460b      	mov	r3, r1
 800240c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002414:	887a      	ldrh	r2, [r7, #2]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	4013      	ands	r3, r2
 800241a:	041a      	lsls	r2, r3, #16
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	43d9      	mvns	r1, r3
 8002420:	887b      	ldrh	r3, [r7, #2]
 8002422:	400b      	ands	r3, r1
 8002424:	431a      	orrs	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	611a      	str	r2, [r3, #16]
}
 800242a:	bf00      	nop
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr

08002434 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e272      	b.n	800292c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	f000 8087 	beq.w	8002562 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002454:	4b92      	ldr	r3, [pc, #584]	@ (80026a0 <HAL_RCC_OscConfig+0x26c>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 030c 	and.w	r3, r3, #12
 800245c:	2b04      	cmp	r3, #4
 800245e:	d00c      	beq.n	800247a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002460:	4b8f      	ldr	r3, [pc, #572]	@ (80026a0 <HAL_RCC_OscConfig+0x26c>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 030c 	and.w	r3, r3, #12
 8002468:	2b08      	cmp	r3, #8
 800246a:	d112      	bne.n	8002492 <HAL_RCC_OscConfig+0x5e>
 800246c:	4b8c      	ldr	r3, [pc, #560]	@ (80026a0 <HAL_RCC_OscConfig+0x26c>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002474:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002478:	d10b      	bne.n	8002492 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800247a:	4b89      	ldr	r3, [pc, #548]	@ (80026a0 <HAL_RCC_OscConfig+0x26c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d06c      	beq.n	8002560 <HAL_RCC_OscConfig+0x12c>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d168      	bne.n	8002560 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e24c      	b.n	800292c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800249a:	d106      	bne.n	80024aa <HAL_RCC_OscConfig+0x76>
 800249c:	4b80      	ldr	r3, [pc, #512]	@ (80026a0 <HAL_RCC_OscConfig+0x26c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a7f      	ldr	r2, [pc, #508]	@ (80026a0 <HAL_RCC_OscConfig+0x26c>)
 80024a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024a6:	6013      	str	r3, [r2, #0]
 80024a8:	e02e      	b.n	8002508 <HAL_RCC_OscConfig+0xd4>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10c      	bne.n	80024cc <HAL_RCC_OscConfig+0x98>
 80024b2:	4b7b      	ldr	r3, [pc, #492]	@ (80026a0 <HAL_RCC_OscConfig+0x26c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a7a      	ldr	r2, [pc, #488]	@ (80026a0 <HAL_RCC_OscConfig+0x26c>)
 80024b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	4b78      	ldr	r3, [pc, #480]	@ (80026a0 <HAL_RCC_OscConfig+0x26c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a77      	ldr	r2, [pc, #476]	@ (80026a0 <HAL_RCC_OscConfig+0x26c>)
 80024c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	e01d      	b.n	8002508 <HAL_RCC_OscConfig+0xd4>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024d4:	d10c      	bne.n	80024f0 <HAL_RCC_OscConfig+0xbc>
 80024d6:	4b72      	ldr	r3, [pc, #456]	@ (80026a0 <HAL_RCC_OscConfig+0x26c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a71      	ldr	r2, [pc, #452]	@ (80026a0 <HAL_RCC_OscConfig+0x26c>)
 80024dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024e0:	6013      	str	r3, [r2, #0]
 80024e2:	4b6f      	ldr	r3, [pc, #444]	@ (80026a0 <HAL_RCC_OscConfig+0x26c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a6e      	ldr	r2, [pc, #440]	@ (80026a0 <HAL_RCC_OscConfig+0x26c>)
 80024e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	e00b      	b.n	8002508 <HAL_RCC_OscConfig+0xd4>
 80024f0:	4b6b      	ldr	r3, [pc, #428]	@ (80026a0 <HAL_RCC_OscConfig+0x26c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a6a      	ldr	r2, [pc, #424]	@ (80026a0 <HAL_RCC_OscConfig+0x26c>)
 80024f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024fa:	6013      	str	r3, [r2, #0]
 80024fc:	4b68      	ldr	r3, [pc, #416]	@ (80026a0 <HAL_RCC_OscConfig+0x26c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a67      	ldr	r2, [pc, #412]	@ (80026a0 <HAL_RCC_OscConfig+0x26c>)
 8002502:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002506:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d013      	beq.n	8002538 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002510:	f7ff fcb4 	bl	8001e7c <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002518:	f7ff fcb0 	bl	8001e7c <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b64      	cmp	r3, #100	@ 0x64
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e200      	b.n	800292c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252a:	4b5d      	ldr	r3, [pc, #372]	@ (80026a0 <HAL_RCC_OscConfig+0x26c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d0f0      	beq.n	8002518 <HAL_RCC_OscConfig+0xe4>
 8002536:	e014      	b.n	8002562 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002538:	f7ff fca0 	bl	8001e7c <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002540:	f7ff fc9c 	bl	8001e7c <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b64      	cmp	r3, #100	@ 0x64
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e1ec      	b.n	800292c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002552:	4b53      	ldr	r3, [pc, #332]	@ (80026a0 <HAL_RCC_OscConfig+0x26c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x10c>
 800255e:	e000      	b.n	8002562 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002560:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d063      	beq.n	8002636 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800256e:	4b4c      	ldr	r3, [pc, #304]	@ (80026a0 <HAL_RCC_OscConfig+0x26c>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f003 030c 	and.w	r3, r3, #12
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00b      	beq.n	8002592 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800257a:	4b49      	ldr	r3, [pc, #292]	@ (80026a0 <HAL_RCC_OscConfig+0x26c>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 030c 	and.w	r3, r3, #12
 8002582:	2b08      	cmp	r3, #8
 8002584:	d11c      	bne.n	80025c0 <HAL_RCC_OscConfig+0x18c>
 8002586:	4b46      	ldr	r3, [pc, #280]	@ (80026a0 <HAL_RCC_OscConfig+0x26c>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d116      	bne.n	80025c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002592:	4b43      	ldr	r3, [pc, #268]	@ (80026a0 <HAL_RCC_OscConfig+0x26c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d005      	beq.n	80025aa <HAL_RCC_OscConfig+0x176>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d001      	beq.n	80025aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e1c0      	b.n	800292c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025aa:	4b3d      	ldr	r3, [pc, #244]	@ (80026a0 <HAL_RCC_OscConfig+0x26c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	4939      	ldr	r1, [pc, #228]	@ (80026a0 <HAL_RCC_OscConfig+0x26c>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025be:	e03a      	b.n	8002636 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d020      	beq.n	800260a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025c8:	4b36      	ldr	r3, [pc, #216]	@ (80026a4 <HAL_RCC_OscConfig+0x270>)
 80025ca:	2201      	movs	r2, #1
 80025cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ce:	f7ff fc55 	bl	8001e7c <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d6:	f7ff fc51 	bl	8001e7c <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e1a1      	b.n	800292c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e8:	4b2d      	ldr	r3, [pc, #180]	@ (80026a0 <HAL_RCC_OscConfig+0x26c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0f0      	beq.n	80025d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f4:	4b2a      	ldr	r3, [pc, #168]	@ (80026a0 <HAL_RCC_OscConfig+0x26c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	4927      	ldr	r1, [pc, #156]	@ (80026a0 <HAL_RCC_OscConfig+0x26c>)
 8002604:	4313      	orrs	r3, r2
 8002606:	600b      	str	r3, [r1, #0]
 8002608:	e015      	b.n	8002636 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800260a:	4b26      	ldr	r3, [pc, #152]	@ (80026a4 <HAL_RCC_OscConfig+0x270>)
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002610:	f7ff fc34 	bl	8001e7c <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002618:	f7ff fc30 	bl	8001e7c <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e180      	b.n	800292c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800262a:	4b1d      	ldr	r3, [pc, #116]	@ (80026a0 <HAL_RCC_OscConfig+0x26c>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f0      	bne.n	8002618 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	2b00      	cmp	r3, #0
 8002640:	d03a      	beq.n	80026b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d019      	beq.n	800267e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800264a:	4b17      	ldr	r3, [pc, #92]	@ (80026a8 <HAL_RCC_OscConfig+0x274>)
 800264c:	2201      	movs	r2, #1
 800264e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002650:	f7ff fc14 	bl	8001e7c <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002658:	f7ff fc10 	bl	8001e7c <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e160      	b.n	800292c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800266a:	4b0d      	ldr	r3, [pc, #52]	@ (80026a0 <HAL_RCC_OscConfig+0x26c>)
 800266c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0f0      	beq.n	8002658 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002676:	2001      	movs	r0, #1
 8002678:	f000 fa9c 	bl	8002bb4 <RCC_Delay>
 800267c:	e01c      	b.n	80026b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800267e:	4b0a      	ldr	r3, [pc, #40]	@ (80026a8 <HAL_RCC_OscConfig+0x274>)
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002684:	f7ff fbfa 	bl	8001e7c <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800268a:	e00f      	b.n	80026ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800268c:	f7ff fbf6 	bl	8001e7c <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d908      	bls.n	80026ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e146      	b.n	800292c <HAL_RCC_OscConfig+0x4f8>
 800269e:	bf00      	nop
 80026a0:	40021000 	.word	0x40021000
 80026a4:	42420000 	.word	0x42420000
 80026a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ac:	4b92      	ldr	r3, [pc, #584]	@ (80028f8 <HAL_RCC_OscConfig+0x4c4>)
 80026ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1e9      	bne.n	800268c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 80a6 	beq.w	8002812 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026c6:	2300      	movs	r3, #0
 80026c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ca:	4b8b      	ldr	r3, [pc, #556]	@ (80028f8 <HAL_RCC_OscConfig+0x4c4>)
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10d      	bne.n	80026f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026d6:	4b88      	ldr	r3, [pc, #544]	@ (80028f8 <HAL_RCC_OscConfig+0x4c4>)
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	4a87      	ldr	r2, [pc, #540]	@ (80028f8 <HAL_RCC_OscConfig+0x4c4>)
 80026dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026e0:	61d3      	str	r3, [r2, #28]
 80026e2:	4b85      	ldr	r3, [pc, #532]	@ (80028f8 <HAL_RCC_OscConfig+0x4c4>)
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ea:	60bb      	str	r3, [r7, #8]
 80026ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ee:	2301      	movs	r3, #1
 80026f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f2:	4b82      	ldr	r3, [pc, #520]	@ (80028fc <HAL_RCC_OscConfig+0x4c8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d118      	bne.n	8002730 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026fe:	4b7f      	ldr	r3, [pc, #508]	@ (80028fc <HAL_RCC_OscConfig+0x4c8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a7e      	ldr	r2, [pc, #504]	@ (80028fc <HAL_RCC_OscConfig+0x4c8>)
 8002704:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800270a:	f7ff fbb7 	bl	8001e7c <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002712:	f7ff fbb3 	bl	8001e7c <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b64      	cmp	r3, #100	@ 0x64
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e103      	b.n	800292c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002724:	4b75      	ldr	r3, [pc, #468]	@ (80028fc <HAL_RCC_OscConfig+0x4c8>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0f0      	beq.n	8002712 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d106      	bne.n	8002746 <HAL_RCC_OscConfig+0x312>
 8002738:	4b6f      	ldr	r3, [pc, #444]	@ (80028f8 <HAL_RCC_OscConfig+0x4c4>)
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	4a6e      	ldr	r2, [pc, #440]	@ (80028f8 <HAL_RCC_OscConfig+0x4c4>)
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	6213      	str	r3, [r2, #32]
 8002744:	e02d      	b.n	80027a2 <HAL_RCC_OscConfig+0x36e>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10c      	bne.n	8002768 <HAL_RCC_OscConfig+0x334>
 800274e:	4b6a      	ldr	r3, [pc, #424]	@ (80028f8 <HAL_RCC_OscConfig+0x4c4>)
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	4a69      	ldr	r2, [pc, #420]	@ (80028f8 <HAL_RCC_OscConfig+0x4c4>)
 8002754:	f023 0301 	bic.w	r3, r3, #1
 8002758:	6213      	str	r3, [r2, #32]
 800275a:	4b67      	ldr	r3, [pc, #412]	@ (80028f8 <HAL_RCC_OscConfig+0x4c4>)
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	4a66      	ldr	r2, [pc, #408]	@ (80028f8 <HAL_RCC_OscConfig+0x4c4>)
 8002760:	f023 0304 	bic.w	r3, r3, #4
 8002764:	6213      	str	r3, [r2, #32]
 8002766:	e01c      	b.n	80027a2 <HAL_RCC_OscConfig+0x36e>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	2b05      	cmp	r3, #5
 800276e:	d10c      	bne.n	800278a <HAL_RCC_OscConfig+0x356>
 8002770:	4b61      	ldr	r3, [pc, #388]	@ (80028f8 <HAL_RCC_OscConfig+0x4c4>)
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	4a60      	ldr	r2, [pc, #384]	@ (80028f8 <HAL_RCC_OscConfig+0x4c4>)
 8002776:	f043 0304 	orr.w	r3, r3, #4
 800277a:	6213      	str	r3, [r2, #32]
 800277c:	4b5e      	ldr	r3, [pc, #376]	@ (80028f8 <HAL_RCC_OscConfig+0x4c4>)
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	4a5d      	ldr	r2, [pc, #372]	@ (80028f8 <HAL_RCC_OscConfig+0x4c4>)
 8002782:	f043 0301 	orr.w	r3, r3, #1
 8002786:	6213      	str	r3, [r2, #32]
 8002788:	e00b      	b.n	80027a2 <HAL_RCC_OscConfig+0x36e>
 800278a:	4b5b      	ldr	r3, [pc, #364]	@ (80028f8 <HAL_RCC_OscConfig+0x4c4>)
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	4a5a      	ldr	r2, [pc, #360]	@ (80028f8 <HAL_RCC_OscConfig+0x4c4>)
 8002790:	f023 0301 	bic.w	r3, r3, #1
 8002794:	6213      	str	r3, [r2, #32]
 8002796:	4b58      	ldr	r3, [pc, #352]	@ (80028f8 <HAL_RCC_OscConfig+0x4c4>)
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	4a57      	ldr	r2, [pc, #348]	@ (80028f8 <HAL_RCC_OscConfig+0x4c4>)
 800279c:	f023 0304 	bic.w	r3, r3, #4
 80027a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d015      	beq.n	80027d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027aa:	f7ff fb67 	bl	8001e7c <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b0:	e00a      	b.n	80027c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b2:	f7ff fb63 	bl	8001e7c <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e0b1      	b.n	800292c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c8:	4b4b      	ldr	r3, [pc, #300]	@ (80028f8 <HAL_RCC_OscConfig+0x4c4>)
 80027ca:	6a1b      	ldr	r3, [r3, #32]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0ee      	beq.n	80027b2 <HAL_RCC_OscConfig+0x37e>
 80027d4:	e014      	b.n	8002800 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d6:	f7ff fb51 	bl	8001e7c <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027dc:	e00a      	b.n	80027f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027de:	f7ff fb4d 	bl	8001e7c <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e09b      	b.n	800292c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027f4:	4b40      	ldr	r3, [pc, #256]	@ (80028f8 <HAL_RCC_OscConfig+0x4c4>)
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1ee      	bne.n	80027de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002800:	7dfb      	ldrb	r3, [r7, #23]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d105      	bne.n	8002812 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002806:	4b3c      	ldr	r3, [pc, #240]	@ (80028f8 <HAL_RCC_OscConfig+0x4c4>)
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	4a3b      	ldr	r2, [pc, #236]	@ (80028f8 <HAL_RCC_OscConfig+0x4c4>)
 800280c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002810:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 8087 	beq.w	800292a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800281c:	4b36      	ldr	r3, [pc, #216]	@ (80028f8 <HAL_RCC_OscConfig+0x4c4>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 030c 	and.w	r3, r3, #12
 8002824:	2b08      	cmp	r3, #8
 8002826:	d061      	beq.n	80028ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	2b02      	cmp	r3, #2
 800282e:	d146      	bne.n	80028be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002830:	4b33      	ldr	r3, [pc, #204]	@ (8002900 <HAL_RCC_OscConfig+0x4cc>)
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002836:	f7ff fb21 	bl	8001e7c <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800283e:	f7ff fb1d 	bl	8001e7c <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e06d      	b.n	800292c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002850:	4b29      	ldr	r3, [pc, #164]	@ (80028f8 <HAL_RCC_OscConfig+0x4c4>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1f0      	bne.n	800283e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002864:	d108      	bne.n	8002878 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002866:	4b24      	ldr	r3, [pc, #144]	@ (80028f8 <HAL_RCC_OscConfig+0x4c4>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	4921      	ldr	r1, [pc, #132]	@ (80028f8 <HAL_RCC_OscConfig+0x4c4>)
 8002874:	4313      	orrs	r3, r2
 8002876:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002878:	4b1f      	ldr	r3, [pc, #124]	@ (80028f8 <HAL_RCC_OscConfig+0x4c4>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a19      	ldr	r1, [r3, #32]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002888:	430b      	orrs	r3, r1
 800288a:	491b      	ldr	r1, [pc, #108]	@ (80028f8 <HAL_RCC_OscConfig+0x4c4>)
 800288c:	4313      	orrs	r3, r2
 800288e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002890:	4b1b      	ldr	r3, [pc, #108]	@ (8002900 <HAL_RCC_OscConfig+0x4cc>)
 8002892:	2201      	movs	r2, #1
 8002894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002896:	f7ff faf1 	bl	8001e7c <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800289e:	f7ff faed 	bl	8001e7c <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e03d      	b.n	800292c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028b0:	4b11      	ldr	r3, [pc, #68]	@ (80028f8 <HAL_RCC_OscConfig+0x4c4>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0f0      	beq.n	800289e <HAL_RCC_OscConfig+0x46a>
 80028bc:	e035      	b.n	800292a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028be:	4b10      	ldr	r3, [pc, #64]	@ (8002900 <HAL_RCC_OscConfig+0x4cc>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c4:	f7ff fada 	bl	8001e7c <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028cc:	f7ff fad6 	bl	8001e7c <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e026      	b.n	800292c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028de:	4b06      	ldr	r3, [pc, #24]	@ (80028f8 <HAL_RCC_OscConfig+0x4c4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f0      	bne.n	80028cc <HAL_RCC_OscConfig+0x498>
 80028ea:	e01e      	b.n	800292a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d107      	bne.n	8002904 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e019      	b.n	800292c <HAL_RCC_OscConfig+0x4f8>
 80028f8:	40021000 	.word	0x40021000
 80028fc:	40007000 	.word	0x40007000
 8002900:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002904:	4b0b      	ldr	r3, [pc, #44]	@ (8002934 <HAL_RCC_OscConfig+0x500>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	429a      	cmp	r2, r3
 8002916:	d106      	bne.n	8002926 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002922:	429a      	cmp	r2, r3
 8002924:	d001      	beq.n	800292a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e000      	b.n	800292c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40021000 	.word	0x40021000

08002938 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e0d0      	b.n	8002aee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800294c:	4b6a      	ldr	r3, [pc, #424]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c0>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d910      	bls.n	800297c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295a:	4b67      	ldr	r3, [pc, #412]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c0>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f023 0207 	bic.w	r2, r3, #7
 8002962:	4965      	ldr	r1, [pc, #404]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c0>)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	4313      	orrs	r3, r2
 8002968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800296a:	4b63      	ldr	r3, [pc, #396]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c0>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d001      	beq.n	800297c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e0b8      	b.n	8002aee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d020      	beq.n	80029ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b00      	cmp	r3, #0
 8002992:	d005      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002994:	4b59      	ldr	r3, [pc, #356]	@ (8002afc <HAL_RCC_ClockConfig+0x1c4>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	4a58      	ldr	r2, [pc, #352]	@ (8002afc <HAL_RCC_ClockConfig+0x1c4>)
 800299a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800299e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0308 	and.w	r3, r3, #8
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d005      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029ac:	4b53      	ldr	r3, [pc, #332]	@ (8002afc <HAL_RCC_ClockConfig+0x1c4>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	4a52      	ldr	r2, [pc, #328]	@ (8002afc <HAL_RCC_ClockConfig+0x1c4>)
 80029b2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80029b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029b8:	4b50      	ldr	r3, [pc, #320]	@ (8002afc <HAL_RCC_ClockConfig+0x1c4>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	494d      	ldr	r1, [pc, #308]	@ (8002afc <HAL_RCC_ClockConfig+0x1c4>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d040      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d107      	bne.n	80029ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029de:	4b47      	ldr	r3, [pc, #284]	@ (8002afc <HAL_RCC_ClockConfig+0x1c4>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d115      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e07f      	b.n	8002aee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d107      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f6:	4b41      	ldr	r3, [pc, #260]	@ (8002afc <HAL_RCC_ClockConfig+0x1c4>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d109      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e073      	b.n	8002aee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a06:	4b3d      	ldr	r3, [pc, #244]	@ (8002afc <HAL_RCC_ClockConfig+0x1c4>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e06b      	b.n	8002aee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a16:	4b39      	ldr	r3, [pc, #228]	@ (8002afc <HAL_RCC_ClockConfig+0x1c4>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f023 0203 	bic.w	r2, r3, #3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	4936      	ldr	r1, [pc, #216]	@ (8002afc <HAL_RCC_ClockConfig+0x1c4>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a28:	f7ff fa28 	bl	8001e7c <HAL_GetTick>
 8002a2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2e:	e00a      	b.n	8002a46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a30:	f7ff fa24 	bl	8001e7c <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e053      	b.n	8002aee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a46:	4b2d      	ldr	r3, [pc, #180]	@ (8002afc <HAL_RCC_ClockConfig+0x1c4>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f003 020c 	and.w	r2, r3, #12
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d1eb      	bne.n	8002a30 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a58:	4b27      	ldr	r3, [pc, #156]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d210      	bcs.n	8002a88 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a66:	4b24      	ldr	r3, [pc, #144]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f023 0207 	bic.w	r2, r3, #7
 8002a6e:	4922      	ldr	r1, [pc, #136]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a76:	4b20      	ldr	r3, [pc, #128]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d001      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e032      	b.n	8002aee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d008      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a94:	4b19      	ldr	r3, [pc, #100]	@ (8002afc <HAL_RCC_ClockConfig+0x1c4>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	4916      	ldr	r1, [pc, #88]	@ (8002afc <HAL_RCC_ClockConfig+0x1c4>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d009      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ab2:	4b12      	ldr	r3, [pc, #72]	@ (8002afc <HAL_RCC_ClockConfig+0x1c4>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	490e      	ldr	r1, [pc, #56]	@ (8002afc <HAL_RCC_ClockConfig+0x1c4>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ac6:	f000 f821 	bl	8002b0c <HAL_RCC_GetSysClockFreq>
 8002aca:	4602      	mov	r2, r0
 8002acc:	4b0b      	ldr	r3, [pc, #44]	@ (8002afc <HAL_RCC_ClockConfig+0x1c4>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	091b      	lsrs	r3, r3, #4
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	490a      	ldr	r1, [pc, #40]	@ (8002b00 <HAL_RCC_ClockConfig+0x1c8>)
 8002ad8:	5ccb      	ldrb	r3, [r1, r3]
 8002ada:	fa22 f303 	lsr.w	r3, r2, r3
 8002ade:	4a09      	ldr	r2, [pc, #36]	@ (8002b04 <HAL_RCC_ClockConfig+0x1cc>)
 8002ae0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ae2:	4b09      	ldr	r3, [pc, #36]	@ (8002b08 <HAL_RCC_ClockConfig+0x1d0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff f986 	bl	8001df8 <HAL_InitTick>

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40022000 	.word	0x40022000
 8002afc:	40021000 	.word	0x40021000
 8002b00:	08003510 	.word	0x08003510
 8002b04:	20000038 	.word	0x20000038
 8002b08:	2000003c 	.word	0x2000003c

08002b0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b087      	sub	sp, #28
 8002b10:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b12:	2300      	movs	r3, #0
 8002b14:	60fb      	str	r3, [r7, #12]
 8002b16:	2300      	movs	r3, #0
 8002b18:	60bb      	str	r3, [r7, #8]
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]
 8002b1e:	2300      	movs	r3, #0
 8002b20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b26:	4b1e      	ldr	r3, [pc, #120]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f003 030c 	and.w	r3, r3, #12
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d002      	beq.n	8002b3c <HAL_RCC_GetSysClockFreq+0x30>
 8002b36:	2b08      	cmp	r3, #8
 8002b38:	d003      	beq.n	8002b42 <HAL_RCC_GetSysClockFreq+0x36>
 8002b3a:	e027      	b.n	8002b8c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b3c:	4b19      	ldr	r3, [pc, #100]	@ (8002ba4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b3e:	613b      	str	r3, [r7, #16]
      break;
 8002b40:	e027      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	0c9b      	lsrs	r3, r3, #18
 8002b46:	f003 030f 	and.w	r3, r3, #15
 8002b4a:	4a17      	ldr	r2, [pc, #92]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b4c:	5cd3      	ldrb	r3, [r2, r3]
 8002b4e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d010      	beq.n	8002b7c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b5a:	4b11      	ldr	r3, [pc, #68]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	0c5b      	lsrs	r3, r3, #17
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	4a11      	ldr	r2, [pc, #68]	@ (8002bac <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b66:	5cd3      	ldrb	r3, [r2, r3]
 8002b68:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a0d      	ldr	r2, [pc, #52]	@ (8002ba4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b6e:	fb03 f202 	mul.w	r2, r3, r2
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b78:	617b      	str	r3, [r7, #20]
 8002b7a:	e004      	b.n	8002b86 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a0c      	ldr	r2, [pc, #48]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b80:	fb02 f303 	mul.w	r3, r2, r3
 8002b84:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	613b      	str	r3, [r7, #16]
      break;
 8002b8a:	e002      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b8c:	4b05      	ldr	r3, [pc, #20]	@ (8002ba4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b8e:	613b      	str	r3, [r7, #16]
      break;
 8002b90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b92:	693b      	ldr	r3, [r7, #16]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	371c      	adds	r7, #28
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	007a1200 	.word	0x007a1200
 8002ba8:	08003520 	.word	0x08003520
 8002bac:	08003530 	.word	0x08003530
 8002bb0:	003d0900 	.word	0x003d0900

08002bb4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8002be8 <RCC_Delay+0x34>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a0a      	ldr	r2, [pc, #40]	@ (8002bec <RCC_Delay+0x38>)
 8002bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc6:	0a5b      	lsrs	r3, r3, #9
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	fb02 f303 	mul.w	r3, r2, r3
 8002bce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bd0:	bf00      	nop
  }
  while (Delay --);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	1e5a      	subs	r2, r3, #1
 8002bd6:	60fa      	str	r2, [r7, #12]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1f9      	bne.n	8002bd0 <RCC_Delay+0x1c>
}
 8002bdc:	bf00      	nop
 8002bde:	bf00      	nop
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr
 8002be8:	20000038 	.word	0x20000038
 8002bec:	10624dd3 	.word	0x10624dd3

08002bf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e041      	b.n	8002c86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d106      	bne.n	8002c1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7fe ffac 	bl	8001b74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2202      	movs	r2, #2
 8002c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3304      	adds	r3, #4
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4610      	mov	r0, r2
 8002c30:	f000 fa56 	bl	80030e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
	...

08002c90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d001      	beq.n	8002ca8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e035      	b.n	8002d14 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2202      	movs	r2, #2
 8002cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f042 0201 	orr.w	r2, r2, #1
 8002cbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a16      	ldr	r2, [pc, #88]	@ (8002d20 <HAL_TIM_Base_Start_IT+0x90>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d009      	beq.n	8002cde <HAL_TIM_Base_Start_IT+0x4e>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cd2:	d004      	beq.n	8002cde <HAL_TIM_Base_Start_IT+0x4e>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a12      	ldr	r2, [pc, #72]	@ (8002d24 <HAL_TIM_Base_Start_IT+0x94>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d111      	bne.n	8002d02 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2b06      	cmp	r3, #6
 8002cee:	d010      	beq.n	8002d12 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f042 0201 	orr.w	r2, r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d00:	e007      	b.n	8002d12 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f042 0201 	orr.w	r2, r2, #1
 8002d10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	40012c00 	.word	0x40012c00
 8002d24:	40000400 	.word	0x40000400

08002d28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d020      	beq.n	8002d8c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d01b      	beq.n	8002d8c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f06f 0202 	mvn.w	r2, #2
 8002d5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f998 	bl	80030a8 <HAL_TIM_IC_CaptureCallback>
 8002d78:	e005      	b.n	8002d86 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f98b 	bl	8003096 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 f99a 	bl	80030ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	f003 0304 	and.w	r3, r3, #4
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d020      	beq.n	8002dd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d01b      	beq.n	8002dd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f06f 0204 	mvn.w	r2, #4
 8002da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2202      	movs	r2, #2
 8002dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f972 	bl	80030a8 <HAL_TIM_IC_CaptureCallback>
 8002dc4:	e005      	b.n	8002dd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f965 	bl	8003096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f974 	bl	80030ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d020      	beq.n	8002e24 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f003 0308 	and.w	r3, r3, #8
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d01b      	beq.n	8002e24 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f06f 0208 	mvn.w	r2, #8
 8002df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2204      	movs	r2, #4
 8002dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	f003 0303 	and.w	r3, r3, #3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f94c 	bl	80030a8 <HAL_TIM_IC_CaptureCallback>
 8002e10:	e005      	b.n	8002e1e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f93f 	bl	8003096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 f94e 	bl	80030ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d020      	beq.n	8002e70 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f003 0310 	and.w	r3, r3, #16
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d01b      	beq.n	8002e70 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f06f 0210 	mvn.w	r2, #16
 8002e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2208      	movs	r2, #8
 8002e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f926 	bl	80030a8 <HAL_TIM_IC_CaptureCallback>
 8002e5c:	e005      	b.n	8002e6a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f919 	bl	8003096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 f928 	bl	80030ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00c      	beq.n	8002e94 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d007      	beq.n	8002e94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f06f 0201 	mvn.w	r2, #1
 8002e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7fe fe2c 	bl	8001aec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00c      	beq.n	8002eb8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d007      	beq.n	8002eb8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 fa6f 	bl	8003396 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00c      	beq.n	8002edc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d007      	beq.n	8002edc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f8f8 	bl	80030cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	f003 0320 	and.w	r3, r3, #32
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00c      	beq.n	8002f00 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f003 0320 	and.w	r3, r3, #32
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d007      	beq.n	8002f00 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f06f 0220 	mvn.w	r2, #32
 8002ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 fa42 	bl	8003384 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f00:	bf00      	nop
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f12:	2300      	movs	r3, #0
 8002f14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d101      	bne.n	8002f24 <HAL_TIM_ConfigClockSource+0x1c>
 8002f20:	2302      	movs	r3, #2
 8002f22:	e0b4      	b.n	800308e <HAL_TIM_ConfigClockSource+0x186>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002f42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f5c:	d03e      	beq.n	8002fdc <HAL_TIM_ConfigClockSource+0xd4>
 8002f5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f62:	f200 8087 	bhi.w	8003074 <HAL_TIM_ConfigClockSource+0x16c>
 8002f66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f6a:	f000 8086 	beq.w	800307a <HAL_TIM_ConfigClockSource+0x172>
 8002f6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f72:	d87f      	bhi.n	8003074 <HAL_TIM_ConfigClockSource+0x16c>
 8002f74:	2b70      	cmp	r3, #112	@ 0x70
 8002f76:	d01a      	beq.n	8002fae <HAL_TIM_ConfigClockSource+0xa6>
 8002f78:	2b70      	cmp	r3, #112	@ 0x70
 8002f7a:	d87b      	bhi.n	8003074 <HAL_TIM_ConfigClockSource+0x16c>
 8002f7c:	2b60      	cmp	r3, #96	@ 0x60
 8002f7e:	d050      	beq.n	8003022 <HAL_TIM_ConfigClockSource+0x11a>
 8002f80:	2b60      	cmp	r3, #96	@ 0x60
 8002f82:	d877      	bhi.n	8003074 <HAL_TIM_ConfigClockSource+0x16c>
 8002f84:	2b50      	cmp	r3, #80	@ 0x50
 8002f86:	d03c      	beq.n	8003002 <HAL_TIM_ConfigClockSource+0xfa>
 8002f88:	2b50      	cmp	r3, #80	@ 0x50
 8002f8a:	d873      	bhi.n	8003074 <HAL_TIM_ConfigClockSource+0x16c>
 8002f8c:	2b40      	cmp	r3, #64	@ 0x40
 8002f8e:	d058      	beq.n	8003042 <HAL_TIM_ConfigClockSource+0x13a>
 8002f90:	2b40      	cmp	r3, #64	@ 0x40
 8002f92:	d86f      	bhi.n	8003074 <HAL_TIM_ConfigClockSource+0x16c>
 8002f94:	2b30      	cmp	r3, #48	@ 0x30
 8002f96:	d064      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0x15a>
 8002f98:	2b30      	cmp	r3, #48	@ 0x30
 8002f9a:	d86b      	bhi.n	8003074 <HAL_TIM_ConfigClockSource+0x16c>
 8002f9c:	2b20      	cmp	r3, #32
 8002f9e:	d060      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0x15a>
 8002fa0:	2b20      	cmp	r3, #32
 8002fa2:	d867      	bhi.n	8003074 <HAL_TIM_ConfigClockSource+0x16c>
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d05c      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0x15a>
 8002fa8:	2b10      	cmp	r3, #16
 8002faa:	d05a      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0x15a>
 8002fac:	e062      	b.n	8003074 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fbe:	f000 f96a 	bl	8003296 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002fd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	609a      	str	r2, [r3, #8]
      break;
 8002fda:	e04f      	b.n	800307c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fec:	f000 f953 	bl	8003296 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ffe:	609a      	str	r2, [r3, #8]
      break;
 8003000:	e03c      	b.n	800307c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800300e:	461a      	mov	r2, r3
 8003010:	f000 f8ca 	bl	80031a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2150      	movs	r1, #80	@ 0x50
 800301a:	4618      	mov	r0, r3
 800301c:	f000 f921 	bl	8003262 <TIM_ITRx_SetConfig>
      break;
 8003020:	e02c      	b.n	800307c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800302e:	461a      	mov	r2, r3
 8003030:	f000 f8e8 	bl	8003204 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2160      	movs	r1, #96	@ 0x60
 800303a:	4618      	mov	r0, r3
 800303c:	f000 f911 	bl	8003262 <TIM_ITRx_SetConfig>
      break;
 8003040:	e01c      	b.n	800307c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800304e:	461a      	mov	r2, r3
 8003050:	f000 f8aa 	bl	80031a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2140      	movs	r1, #64	@ 0x40
 800305a:	4618      	mov	r0, r3
 800305c:	f000 f901 	bl	8003262 <TIM_ITRx_SetConfig>
      break;
 8003060:	e00c      	b.n	800307c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4619      	mov	r1, r3
 800306c:	4610      	mov	r0, r2
 800306e:	f000 f8f8 	bl	8003262 <TIM_ITRx_SetConfig>
      break;
 8003072:	e003      	b.n	800307c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	73fb      	strb	r3, [r7, #15]
      break;
 8003078:	e000      	b.n	800307c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800307a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800308c:	7bfb      	ldrb	r3, [r7, #15]
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bc80      	pop	{r7}
 80030a6:	4770      	bx	lr

080030a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bc80      	pop	{r7}
 80030b8:	4770      	bx	lr

080030ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr

080030cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	bc80      	pop	{r7}
 80030dc:	4770      	bx	lr
	...

080030e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a2b      	ldr	r2, [pc, #172]	@ (80031a0 <TIM_Base_SetConfig+0xc0>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d007      	beq.n	8003108 <TIM_Base_SetConfig+0x28>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030fe:	d003      	beq.n	8003108 <TIM_Base_SetConfig+0x28>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a28      	ldr	r2, [pc, #160]	@ (80031a4 <TIM_Base_SetConfig+0xc4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d108      	bne.n	800311a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800310e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	4313      	orrs	r3, r2
 8003118:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a20      	ldr	r2, [pc, #128]	@ (80031a0 <TIM_Base_SetConfig+0xc0>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d007      	beq.n	8003132 <TIM_Base_SetConfig+0x52>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003128:	d003      	beq.n	8003132 <TIM_Base_SetConfig+0x52>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a1d      	ldr	r2, [pc, #116]	@ (80031a4 <TIM_Base_SetConfig+0xc4>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d108      	bne.n	8003144 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003138:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	4313      	orrs	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	4313      	orrs	r3, r2
 8003150:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a0d      	ldr	r2, [pc, #52]	@ (80031a0 <TIM_Base_SetConfig+0xc0>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d103      	bne.n	8003178 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	691a      	ldr	r2, [r3, #16]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d005      	beq.n	8003196 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	f023 0201 	bic.w	r2, r3, #1
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	611a      	str	r2, [r3, #16]
  }
}
 8003196:	bf00      	nop
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	bc80      	pop	{r7}
 800319e:	4770      	bx	lr
 80031a0:	40012c00 	.word	0x40012c00
 80031a4:	40000400 	.word	0x40000400

080031a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b087      	sub	sp, #28
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	f023 0201 	bic.w	r2, r3, #1
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	011b      	lsls	r3, r3, #4
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	4313      	orrs	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f023 030a 	bic.w	r3, r3, #10
 80031e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	621a      	str	r2, [r3, #32]
}
 80031fa:	bf00      	nop
 80031fc:	371c      	adds	r7, #28
 80031fe:	46bd      	mov	sp, r7
 8003200:	bc80      	pop	{r7}
 8003202:	4770      	bx	lr

08003204 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003204:	b480      	push	{r7}
 8003206:	b087      	sub	sp, #28
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	f023 0210 	bic.w	r2, r3, #16
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800322e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	031b      	lsls	r3, r3, #12
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	4313      	orrs	r3, r2
 8003238:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003240:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	4313      	orrs	r3, r2
 800324a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	621a      	str	r2, [r3, #32]
}
 8003258:	bf00      	nop
 800325a:	371c      	adds	r7, #28
 800325c:	46bd      	mov	sp, r7
 800325e:	bc80      	pop	{r7}
 8003260:	4770      	bx	lr

08003262 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003262:	b480      	push	{r7}
 8003264:	b085      	sub	sp, #20
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
 800326a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003278:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4313      	orrs	r3, r2
 8003280:	f043 0307 	orr.w	r3, r3, #7
 8003284:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	609a      	str	r2, [r3, #8]
}
 800328c:	bf00      	nop
 800328e:	3714      	adds	r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	bc80      	pop	{r7}
 8003294:	4770      	bx	lr

08003296 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003296:	b480      	push	{r7}
 8003298:	b087      	sub	sp, #28
 800329a:	af00      	add	r7, sp, #0
 800329c:	60f8      	str	r0, [r7, #12]
 800329e:	60b9      	str	r1, [r7, #8]
 80032a0:	607a      	str	r2, [r7, #4]
 80032a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80032b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	021a      	lsls	r2, r3, #8
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	431a      	orrs	r2, r3
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	4313      	orrs	r3, r2
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	609a      	str	r2, [r3, #8]
}
 80032ca:	bf00      	nop
 80032cc:	371c      	adds	r7, #28
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr

080032d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d101      	bne.n	80032ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032e8:	2302      	movs	r3, #2
 80032ea:	e041      	b.n	8003370 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2202      	movs	r2, #2
 80032f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003312:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	4313      	orrs	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a14      	ldr	r2, [pc, #80]	@ (800337c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d009      	beq.n	8003344 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003338:	d004      	beq.n	8003344 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a10      	ldr	r2, [pc, #64]	@ (8003380 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d10c      	bne.n	800335e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800334a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	4313      	orrs	r3, r2
 8003354:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	bc80      	pop	{r7}
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	40012c00 	.word	0x40012c00
 8003380:	40000400 	.word	0x40000400

08003384 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	bc80      	pop	{r7}
 8003394:	4770      	bx	lr

08003396 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003396:	b480      	push	{r7}
 8003398:	b083      	sub	sp, #12
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bc80      	pop	{r7}
 80033a6:	4770      	bx	lr

080033a8 <memset>:
 80033a8:	4603      	mov	r3, r0
 80033aa:	4402      	add	r2, r0
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d100      	bne.n	80033b2 <memset+0xa>
 80033b0:	4770      	bx	lr
 80033b2:	f803 1b01 	strb.w	r1, [r3], #1
 80033b6:	e7f9      	b.n	80033ac <memset+0x4>

080033b8 <__libc_init_array>:
 80033b8:	b570      	push	{r4, r5, r6, lr}
 80033ba:	2600      	movs	r6, #0
 80033bc:	4d0c      	ldr	r5, [pc, #48]	@ (80033f0 <__libc_init_array+0x38>)
 80033be:	4c0d      	ldr	r4, [pc, #52]	@ (80033f4 <__libc_init_array+0x3c>)
 80033c0:	1b64      	subs	r4, r4, r5
 80033c2:	10a4      	asrs	r4, r4, #2
 80033c4:	42a6      	cmp	r6, r4
 80033c6:	d109      	bne.n	80033dc <__libc_init_array+0x24>
 80033c8:	f000 f896 	bl	80034f8 <_init>
 80033cc:	2600      	movs	r6, #0
 80033ce:	4d0a      	ldr	r5, [pc, #40]	@ (80033f8 <__libc_init_array+0x40>)
 80033d0:	4c0a      	ldr	r4, [pc, #40]	@ (80033fc <__libc_init_array+0x44>)
 80033d2:	1b64      	subs	r4, r4, r5
 80033d4:	10a4      	asrs	r4, r4, #2
 80033d6:	42a6      	cmp	r6, r4
 80033d8:	d105      	bne.n	80033e6 <__libc_init_array+0x2e>
 80033da:	bd70      	pop	{r4, r5, r6, pc}
 80033dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80033e0:	4798      	blx	r3
 80033e2:	3601      	adds	r6, #1
 80033e4:	e7ee      	b.n	80033c4 <__libc_init_array+0xc>
 80033e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80033ea:	4798      	blx	r3
 80033ec:	3601      	adds	r6, #1
 80033ee:	e7f2      	b.n	80033d6 <__libc_init_array+0x1e>
 80033f0:	08003534 	.word	0x08003534
 80033f4:	08003534 	.word	0x08003534
 80033f8:	08003534 	.word	0x08003534
 80033fc:	08003538 	.word	0x08003538

08003400 <ceil>:
 8003400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003404:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8003408:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 800340c:	2e13      	cmp	r6, #19
 800340e:	4602      	mov	r2, r0
 8003410:	460b      	mov	r3, r1
 8003412:	460c      	mov	r4, r1
 8003414:	4605      	mov	r5, r0
 8003416:	4680      	mov	r8, r0
 8003418:	dc2f      	bgt.n	800347a <ceil+0x7a>
 800341a:	2e00      	cmp	r6, #0
 800341c:	da11      	bge.n	8003442 <ceil+0x42>
 800341e:	a332      	add	r3, pc, #200	@ (adr r3, 80034e8 <ceil+0xe8>)
 8003420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003424:	f7fc ffc4 	bl	80003b0 <__adddf3>
 8003428:	2200      	movs	r2, #0
 800342a:	2300      	movs	r3, #0
 800342c:	f7fd f9f4 	bl	8000818 <__aeabi_dcmpgt>
 8003430:	b120      	cbz	r0, 800343c <ceil+0x3c>
 8003432:	2c00      	cmp	r4, #0
 8003434:	db51      	blt.n	80034da <ceil+0xda>
 8003436:	4325      	orrs	r5, r4
 8003438:	d153      	bne.n	80034e2 <ceil+0xe2>
 800343a:	462c      	mov	r4, r5
 800343c:	4623      	mov	r3, r4
 800343e:	462a      	mov	r2, r5
 8003440:	e024      	b.n	800348c <ceil+0x8c>
 8003442:	4f2b      	ldr	r7, [pc, #172]	@ (80034f0 <ceil+0xf0>)
 8003444:	4137      	asrs	r7, r6
 8003446:	ea01 0c07 	and.w	ip, r1, r7
 800344a:	ea5c 0c00 	orrs.w	ip, ip, r0
 800344e:	d01d      	beq.n	800348c <ceil+0x8c>
 8003450:	a325      	add	r3, pc, #148	@ (adr r3, 80034e8 <ceil+0xe8>)
 8003452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003456:	f7fc ffab 	bl	80003b0 <__adddf3>
 800345a:	2200      	movs	r2, #0
 800345c:	2300      	movs	r3, #0
 800345e:	f7fd f9db 	bl	8000818 <__aeabi_dcmpgt>
 8003462:	2800      	cmp	r0, #0
 8003464:	d0ea      	beq.n	800343c <ceil+0x3c>
 8003466:	2c00      	cmp	r4, #0
 8003468:	bfc2      	ittt	gt
 800346a:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 800346e:	4133      	asrgt	r3, r6
 8003470:	18e4      	addgt	r4, r4, r3
 8003472:	2500      	movs	r5, #0
 8003474:	ea24 0407 	bic.w	r4, r4, r7
 8003478:	e7e0      	b.n	800343c <ceil+0x3c>
 800347a:	2e33      	cmp	r6, #51	@ 0x33
 800347c:	dd0a      	ble.n	8003494 <ceil+0x94>
 800347e:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8003482:	d103      	bne.n	800348c <ceil+0x8c>
 8003484:	f7fc ff94 	bl	80003b0 <__adddf3>
 8003488:	4602      	mov	r2, r0
 800348a:	460b      	mov	r3, r1
 800348c:	4610      	mov	r0, r2
 800348e:	4619      	mov	r1, r3
 8003490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003494:	f04f 3cff 	mov.w	ip, #4294967295
 8003498:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800349c:	fa2c f707 	lsr.w	r7, ip, r7
 80034a0:	4238      	tst	r0, r7
 80034a2:	d0f3      	beq.n	800348c <ceil+0x8c>
 80034a4:	a310      	add	r3, pc, #64	@ (adr r3, 80034e8 <ceil+0xe8>)
 80034a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034aa:	f7fc ff81 	bl	80003b0 <__adddf3>
 80034ae:	2200      	movs	r2, #0
 80034b0:	2300      	movs	r3, #0
 80034b2:	f7fd f9b1 	bl	8000818 <__aeabi_dcmpgt>
 80034b6:	2800      	cmp	r0, #0
 80034b8:	d0c0      	beq.n	800343c <ceil+0x3c>
 80034ba:	2c00      	cmp	r4, #0
 80034bc:	dd0a      	ble.n	80034d4 <ceil+0xd4>
 80034be:	2e14      	cmp	r6, #20
 80034c0:	d101      	bne.n	80034c6 <ceil+0xc6>
 80034c2:	3401      	adds	r4, #1
 80034c4:	e006      	b.n	80034d4 <ceil+0xd4>
 80034c6:	2301      	movs	r3, #1
 80034c8:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80034cc:	40b3      	lsls	r3, r6
 80034ce:	441d      	add	r5, r3
 80034d0:	45a8      	cmp	r8, r5
 80034d2:	d8f6      	bhi.n	80034c2 <ceil+0xc2>
 80034d4:	ea25 0507 	bic.w	r5, r5, r7
 80034d8:	e7b0      	b.n	800343c <ceil+0x3c>
 80034da:	2500      	movs	r5, #0
 80034dc:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 80034e0:	e7ac      	b.n	800343c <ceil+0x3c>
 80034e2:	2500      	movs	r5, #0
 80034e4:	4c03      	ldr	r4, [pc, #12]	@ (80034f4 <ceil+0xf4>)
 80034e6:	e7a9      	b.n	800343c <ceil+0x3c>
 80034e8:	8800759c 	.word	0x8800759c
 80034ec:	7e37e43c 	.word	0x7e37e43c
 80034f0:	000fffff 	.word	0x000fffff
 80034f4:	3ff00000 	.word	0x3ff00000

080034f8 <_init>:
 80034f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034fa:	bf00      	nop
 80034fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034fe:	bc08      	pop	{r3}
 8003500:	469e      	mov	lr, r3
 8003502:	4770      	bx	lr

08003504 <_fini>:
 8003504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003506:	bf00      	nop
 8003508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800350a:	bc08      	pop	{r3}
 800350c:	469e      	mov	lr, r3
 800350e:	4770      	bx	lr
